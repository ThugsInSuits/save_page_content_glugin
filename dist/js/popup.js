(()=>{"use strict";var e={"./node_modules/@notionhq/client/build/src/Client.js":
/*!***********************************************************!*\
  !*** ./node_modules/@notionhq/client/build/src/Client.js ***!
  \***********************************************************/function(e,t,r){var a,o,s,i,n,l,d,u,c,h=this&&this.__classPrivateFieldSet||function(e,t,r,a,o){if("m"===a)throw new TypeError("Private method is not writable");if("a"===a&&!o)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof t?e!==t||!o:!t.has(e))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===a?o.call(e,r):o?o.value=r:t.set(e,r),r},p=this&&this.__classPrivateFieldGet||function(e,t,r,a){if("a"===r&&!a)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?e!==t||!a:!t.has(e))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===r?a:"a"===r?a.call(e):a?a.value:t.get(e)};Object.defineProperty(t,"__esModule",{value:!0});const m=r(/*! ./logging */"./node_modules/@notionhq/client/build/src/logging.js"),b=r(/*! ./errors */"./node_modules/@notionhq/client/build/src/errors.js"),g=r(/*! ./utils */"./node_modules/@notionhq/client/build/src/utils.js"),y=r(/*! ./api-endpoints */"./node_modules/@notionhq/client/build/src/api-endpoints.js"),P=r(/*! node-fetch */"./node_modules/node-fetch/browser.js"),f=r(/*! ../package.json */"./node_modules/@notionhq/client/build/package.json");class v{constructor(e){var t,r,p,b,k,q;a.set(this,void 0),o.set(this,void 0),s.set(this,void 0),i.set(this,void 0),n.set(this,void 0),l.set(this,void 0),d.set(this,void 0),u.set(this,void 0),c.set(this,void 0),this.blocks={retrieve:e=>this.request({path:y.getBlock.path(e),method:y.getBlock.method,query:(0,g.pick)(e,y.getBlock.queryParams),body:(0,g.pick)(e,y.getBlock.bodyParams),auth:null==e?void 0:e.auth}),update:e=>this.request({path:y.updateBlock.path(e),method:y.updateBlock.method,query:(0,g.pick)(e,y.updateBlock.queryParams),body:(0,g.pick)(e,y.updateBlock.bodyParams),auth:null==e?void 0:e.auth}),delete:e=>this.request({path:y.deleteBlock.path(e),method:y.deleteBlock.method,query:(0,g.pick)(e,y.deleteBlock.queryParams),body:(0,g.pick)(e,y.deleteBlock.bodyParams),auth:null==e?void 0:e.auth}),children:{append:e=>this.request({path:y.appendBlockChildren.path(e),method:y.appendBlockChildren.method,query:(0,g.pick)(e,y.appendBlockChildren.queryParams),body:(0,g.pick)(e,y.appendBlockChildren.bodyParams),auth:null==e?void 0:e.auth}),list:e=>this.request({path:y.listBlockChildren.path(e),method:y.listBlockChildren.method,query:(0,g.pick)(e,y.listBlockChildren.queryParams),body:(0,g.pick)(e,y.listBlockChildren.bodyParams),auth:null==e?void 0:e.auth})}},this.databases={list:e=>this.request({path:y.listDatabases.path(),method:y.listDatabases.method,query:(0,g.pick)(e,y.listDatabases.queryParams),body:(0,g.pick)(e,y.listDatabases.bodyParams),auth:null==e?void 0:e.auth}),retrieve:e=>this.request({path:y.getDatabase.path(e),method:y.getDatabase.method,query:(0,g.pick)(e,y.getDatabase.queryParams),body:(0,g.pick)(e,y.getDatabase.bodyParams),auth:null==e?void 0:e.auth}),query:e=>this.request({path:y.queryDatabase.path(e),method:y.queryDatabase.method,query:(0,g.pick)(e,y.queryDatabase.queryParams),body:(0,g.pick)(e,y.queryDatabase.bodyParams),auth:null==e?void 0:e.auth}),create:e=>this.request({path:y.createDatabase.path(),method:y.createDatabase.method,query:(0,g.pick)(e,y.createDatabase.queryParams),body:(0,g.pick)(e,y.createDatabase.bodyParams),auth:null==e?void 0:e.auth}),update:e=>this.request({path:y.updateDatabase.path(e),method:y.updateDatabase.method,query:(0,g.pick)(e,y.updateDatabase.queryParams),body:(0,g.pick)(e,y.updateDatabase.bodyParams),auth:null==e?void 0:e.auth})},this.pages={create:e=>this.request({path:y.createPage.path(),method:y.createPage.method,query:(0,g.pick)(e,y.createPage.queryParams),body:(0,g.pick)(e,y.createPage.bodyParams),auth:null==e?void 0:e.auth}),retrieve:e=>this.request({path:y.getPage.path(e),method:y.getPage.method,query:(0,g.pick)(e,y.getPage.queryParams),body:(0,g.pick)(e,y.getPage.bodyParams),auth:null==e?void 0:e.auth}),update:e=>this.request({path:y.updatePage.path(e),method:y.updatePage.method,query:(0,g.pick)(e,y.updatePage.queryParams),body:(0,g.pick)(e,y.updatePage.bodyParams),auth:null==e?void 0:e.auth}),properties:{retrieve:e=>this.request({path:y.getPageProperty.path(e),method:y.getPageProperty.method,query:(0,g.pick)(e,y.getPageProperty.queryParams),body:(0,g.pick)(e,y.getPageProperty.bodyParams),auth:null==e?void 0:e.auth})}},this.users={retrieve:e=>this.request({path:y.getUser.path(e),method:y.getUser.method,query:(0,g.pick)(e,y.getUser.queryParams),body:(0,g.pick)(e,y.getUser.bodyParams),auth:null==e?void 0:e.auth}),list:e=>this.request({path:y.listUsers.path(),method:y.listUsers.method,query:(0,g.pick)(e,y.listUsers.queryParams),body:(0,g.pick)(e,y.listUsers.bodyParams),auth:null==e?void 0:e.auth}),me:e=>this.request({path:y.getSelf.path(),method:y.getSelf.method,query:(0,g.pick)(e,y.getSelf.queryParams),body:(0,g.pick)(e,y.getSelf.bodyParams),auth:null==e?void 0:e.auth})},this.comments={create:e=>this.request({path:y.createComment.path(),method:y.createComment.method,query:(0,g.pick)(e,y.createComment.queryParams),body:(0,g.pick)(e,y.createComment.bodyParams),auth:null==e?void 0:e.auth}),list:e=>this.request({path:y.listComments.path(),method:y.listComments.method,query:(0,g.pick)(e,y.listComments.queryParams),body:(0,g.pick)(e,y.listComments.bodyParams),auth:null==e?void 0:e.auth})},this.search=e=>this.request({path:y.search.path(),method:y.search.method,query:(0,g.pick)(e,y.search.queryParams),body:(0,g.pick)(e,y.search.bodyParams),auth:null==e?void 0:e.auth}),this.oauth={token:e=>this.request({path:y.oauthToken.path(),method:y.oauthToken.method,query:(0,g.pick)(e,y.oauthToken.queryParams),body:(0,g.pick)(e,y.oauthToken.bodyParams),auth:{client_id:e.client_id,client_secret:e.client_secret}})},h(this,a,null==e?void 0:e.auth,"f"),h(this,o,null!==(t=null==e?void 0:e.logLevel)&&void 0!==t?t:m.LogLevel.WARN,"f"),h(this,s,null!==(r=null==e?void 0:e.logger)&&void 0!==r?r:(0,m.makeConsoleLogger)(f.name),"f"),h(this,i,(null!==(p=null==e?void 0:e.baseUrl)&&void 0!==p?p:"https://api.notion.com")+"/v1/","f"),h(this,n,null!==(b=null==e?void 0:e.timeoutMs)&&void 0!==b?b:6e4,"f"),h(this,l,null!==(k=null==e?void 0:e.notionVersion)&&void 0!==k?k:v.defaultNotionVersion,"f"),h(this,d,null!==(q=null==e?void 0:e.fetch)&&void 0!==q?q:P.default,"f"),h(this,u,null==e?void 0:e.agent,"f"),h(this,c,`notionhq-client/${f.version}`,"f")}async request({path:e,method:t,query:r,body:a,auth:o}){this.log(m.LogLevel.INFO,"request start",{method:t,path:e});const s=a&&0!==Object.entries(a).length?JSON.stringify(a):void 0,h=new URL(`${p(this,i,"f")}${e}`);if(r)for(const[e,t]of Object.entries(r))void 0!==t&&(Array.isArray(t)?t.forEach((t=>h.searchParams.append(e,decodeURIComponent(t)))):h.searchParams.append(e,String(t)));let g;if("object"==typeof o){const e=`${o.client_id}:${o.client_secret}`;g={authorization:`Basic ${Buffer.from(e).toString("base64")}`}}else g=this.authAsHeaders(o);const y={...g,"Notion-Version":p(this,l,"f"),"user-agent":p(this,c,"f")};void 0!==s&&(y["content-type"]="application/json");try{const r=await b.RequestTimeoutError.rejectAfterTimeout(p(this,d,"f").call(this,h.toString(),{method:t.toUpperCase(),headers:y,body:s,agent:p(this,u,"f")}),p(this,n,"f")),a=await r.text();if(!r.ok)throw(0,b.buildRequestError)(r,a);const o=JSON.parse(a);return this.log(m.LogLevel.INFO,"request success",{method:t,path:e}),o}catch(e){if(!(0,b.isNotionClientError)(e))throw e;throw this.log(m.LogLevel.WARN,"request fail",{code:e.code,message:e.message}),(0,b.isHTTPResponseError)(e)&&this.log(m.LogLevel.DEBUG,"failed response body",{body:e.body}),e}}log(e,t,r){(0,m.logLevelSeverity)(e)>=(0,m.logLevelSeverity)(p(this,o,"f"))&&p(this,s,"f").call(this,e,t,r)}authAsHeaders(e){const t={},r=null!=e?e:p(this,a,"f");return void 0!==r&&(t.authorization=`Bearer ${r}`),t}}t.default=v,a=new WeakMap,o=new WeakMap,s=new WeakMap,i=new WeakMap,n=new WeakMap,l=new WeakMap,d=new WeakMap,u=new WeakMap,c=new WeakMap,v.defaultNotionVersion="2022-06-28"},"./node_modules/@notionhq/client/build/src/api-endpoints.js":
/*!******************************************************************!*\
  !*** ./node_modules/@notionhq/client/build/src/api-endpoints.js ***!
  \******************************************************************/(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.oauthToken=t.listComments=t.createComment=t.search=t.createDatabase=t.listDatabases=t.queryDatabase=t.updateDatabase=t.getDatabase=t.appendBlockChildren=t.listBlockChildren=t.deleteBlock=t.updateBlock=t.getBlock=t.getPageProperty=t.updatePage=t.getPage=t.createPage=t.listUsers=t.getUser=t.getSelf=void 0,t.getSelf={method:"get",pathParams:[],queryParams:[],bodyParams:[],path:()=>"users/me"},t.getUser={method:"get",pathParams:["user_id"],queryParams:[],bodyParams:[],path:e=>`users/${e.user_id}`},t.listUsers={method:"get",pathParams:[],queryParams:["start_cursor","page_size"],bodyParams:[],path:()=>"users"},t.createPage={method:"post",pathParams:[],queryParams:[],bodyParams:["parent","properties","icon","cover","content","children"],path:()=>"pages"},t.getPage={method:"get",pathParams:["page_id"],queryParams:["filter_properties"],bodyParams:[],path:e=>`pages/${e.page_id}`},t.updatePage={method:"patch",pathParams:["page_id"],queryParams:[],bodyParams:["properties","icon","cover","archived"],path:e=>`pages/${e.page_id}`},t.getPageProperty={method:"get",pathParams:["page_id","property_id"],queryParams:["start_cursor","page_size"],bodyParams:[],path:e=>`pages/${e.page_id}/properties/${e.property_id}`},t.getBlock={method:"get",pathParams:["block_id"],queryParams:[],bodyParams:[],path:e=>`blocks/${e.block_id}`},t.updateBlock={method:"patch",pathParams:["block_id"],queryParams:[],bodyParams:["embed","type","archived","bookmark","image","video","pdf","file","audio","code","equation","divider","breadcrumb","table_of_contents","link_to_page","table_row","heading_1","heading_2","heading_3","paragraph","bulleted_list_item","numbered_list_item","quote","to_do","toggle","template","callout","synced_block","table"],path:e=>`blocks/${e.block_id}`},t.deleteBlock={method:"delete",pathParams:["block_id"],queryParams:[],bodyParams:[],path:e=>`blocks/${e.block_id}`},t.listBlockChildren={method:"get",pathParams:["block_id"],queryParams:["start_cursor","page_size"],bodyParams:[],path:e=>`blocks/${e.block_id}/children`},t.appendBlockChildren={method:"patch",pathParams:["block_id"],queryParams:[],bodyParams:["children","after"],path:e=>`blocks/${e.block_id}/children`},t.getDatabase={method:"get",pathParams:["database_id"],queryParams:[],bodyParams:[],path:e=>`databases/${e.database_id}`},t.updateDatabase={method:"patch",pathParams:["database_id"],queryParams:[],bodyParams:["title","description","icon","cover","properties","is_inline","archived"],path:e=>`databases/${e.database_id}`},t.queryDatabase={method:"post",pathParams:["database_id"],queryParams:["filter_properties"],bodyParams:["sorts","filter","start_cursor","page_size","archived"],path:e=>`databases/${e.database_id}/query`},t.listDatabases={method:"get",pathParams:[],queryParams:["start_cursor","page_size"],bodyParams:[],path:()=>"databases"},t.createDatabase={method:"post",pathParams:[],queryParams:[],bodyParams:["parent","properties","icon","cover","title","description","is_inline"],path:()=>"databases"},t.search={method:"post",pathParams:[],queryParams:[],bodyParams:["sort","query","start_cursor","page_size","filter"],path:()=>"search"},t.createComment={method:"post",pathParams:[],queryParams:[],bodyParams:["parent","rich_text","discussion_id"],path:()=>"comments"},t.listComments={method:"get",pathParams:[],queryParams:["block_id","start_cursor","page_size"],bodyParams:[],path:()=>"comments"},t.oauthToken={method:"post",pathParams:[],queryParams:[],bodyParams:["grant_type","code","redirect_uri","external_account"],path:()=>"oauth/token"}},"./node_modules/@notionhq/client/build/src/errors.js":
/*!***********************************************************!*\
  !*** ./node_modules/@notionhq/client/build/src/errors.js ***!
  \***********************************************************/(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.buildRequestError=t.APIResponseError=t.UnknownHTTPResponseError=t.isHTTPResponseError=t.RequestTimeoutError=t.isNotionClientError=t.ClientErrorCode=t.APIErrorCode=void 0;const a=r(/*! ./utils */"./node_modules/@notionhq/client/build/src/utils.js");var o,s;!function(e){e.Unauthorized="unauthorized",e.RestrictedResource="restricted_resource",e.ObjectNotFound="object_not_found",e.RateLimited="rate_limited",e.InvalidJSON="invalid_json",e.InvalidRequestURL="invalid_request_url",e.InvalidRequest="invalid_request",e.ValidationError="validation_error",e.ConflictError="conflict_error",e.InternalServerError="internal_server_error",e.ServiceUnavailable="service_unavailable"}(o=t.APIErrorCode||(t.APIErrorCode={})),function(e){e.RequestTimeout="notionhq_client_request_timeout",e.ResponseError="notionhq_client_response_error"}(s=t.ClientErrorCode||(t.ClientErrorCode={}));class i extends Error{}function n(e){return(0,a.isObject)(e)&&e instanceof i}function l(e,t){return n(e)&&e.code in t}t.isNotionClientError=n;class d extends i{constructor(e="Request to Notion API has timed out"){super(e),this.code=s.RequestTimeout,this.name="RequestTimeoutError"}static isRequestTimeoutError(e){return l(e,{[s.RequestTimeout]:!0})}static rejectAfterTimeout(e,t){return new Promise(((r,a)=>{const o=setTimeout((()=>{a(new d)}),t);e.then(r).catch(a).then((()=>clearTimeout(o)))}))}}t.RequestTimeoutError=d;class u extends i{constructor(e){super(e.message),this.name="HTTPResponseError";const{code:t,status:r,headers:a,rawBodyText:o}=e;this.code=t,this.status=r,this.headers=a,this.body=o}}const c={[s.ResponseError]:!0,[o.Unauthorized]:!0,[o.RestrictedResource]:!0,[o.ObjectNotFound]:!0,[o.RateLimited]:!0,[o.InvalidJSON]:!0,[o.InvalidRequestURL]:!0,[o.InvalidRequest]:!0,[o.ValidationError]:!0,[o.ConflictError]:!0,[o.InternalServerError]:!0,[o.ServiceUnavailable]:!0};t.isHTTPResponseError=function(e){return!!l(e,c)};class h extends u{constructor(e){var t;super({...e,code:s.ResponseError,message:null!==(t=e.message)&&void 0!==t?t:`Request to Notion API failed with status: ${e.status}`}),this.name="UnknownHTTPResponseError"}static isUnknownHTTPResponseError(e){return l(e,{[s.ResponseError]:!0})}}t.UnknownHTTPResponseError=h;const p={[o.Unauthorized]:!0,[o.RestrictedResource]:!0,[o.ObjectNotFound]:!0,[o.RateLimited]:!0,[o.InvalidJSON]:!0,[o.InvalidRequestURL]:!0,[o.InvalidRequest]:!0,[o.ValidationError]:!0,[o.ConflictError]:!0,[o.InternalServerError]:!0,[o.ServiceUnavailable]:!0};class m extends u{constructor(){super(...arguments),this.name="APIResponseError"}static isAPIResponseError(e){return l(e,p)}}t.APIResponseError=m,t.buildRequestError=function(e,t){const r=function(e){if("string"!=typeof e)return;let t;try{t=JSON.parse(e)}catch(e){return}if(!(0,a.isObject)(t)||"string"!=typeof t.message||(r=t.code,"string"!=typeof r||!(r in p)))return;var r;return{...t,code:t.code,message:t.message}}(t);return void 0!==r?new m({code:r.code,message:r.message,headers:e.headers,status:e.status,rawBodyText:t}):new h({message:void 0,headers:e.headers,status:e.status,rawBodyText:t})}},"./node_modules/@notionhq/client/build/src/helpers.js":
/*!************************************************************!*\
  !*** ./node_modules/@notionhq/client/build/src/helpers.js ***!
  \************************************************************/(e,t)=>{async function*r(e,t){let r=t.start_cursor;do{const a=await e({...t,start_cursor:r});yield*a.results,r=a.next_cursor}while(r)}function a(e){return"url"in e}function o(e){return"title"in e}Object.defineProperty(t,"__esModule",{value:!0}),t.isFullComment=t.isFullUser=t.isFullPageOrDatabase=t.isFullDatabase=t.isFullPage=t.isFullBlock=t.collectPaginatedAPI=t.iteratePaginatedAPI=void 0,t.iteratePaginatedAPI=r,t.collectPaginatedAPI=async function(e,t){const a=[];for await(const o of r(e,t))a.push(o);return a},t.isFullBlock=function(e){return"type"in e},t.isFullPage=a,t.isFullDatabase=o,t.isFullPageOrDatabase=function(e){return"database"===e.object?o(e):a(e)},t.isFullUser=function(e){return"type"in e},t.isFullComment=function(e){return"created_by"in e}},"./node_modules/@notionhq/client/build/src/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/@notionhq/client/build/src/index.js ***!
  \**********************************************************/(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.isFullPageOrDatabase=t.isFullComment=t.isFullUser=t.isFullPage=t.isFullDatabase=t.isFullBlock=t.iteratePaginatedAPI=t.collectPaginatedAPI=t.isNotionClientError=t.RequestTimeoutError=t.UnknownHTTPResponseError=t.APIResponseError=t.ClientErrorCode=t.APIErrorCode=t.LogLevel=t.Client=void 0;var a=r(/*! ./Client */"./node_modules/@notionhq/client/build/src/Client.js");Object.defineProperty(t,"Client",{enumerable:!0,get:function(){return a.default}});var o=r(/*! ./logging */"./node_modules/@notionhq/client/build/src/logging.js");Object.defineProperty(t,"LogLevel",{enumerable:!0,get:function(){return o.LogLevel}});var s=r(/*! ./errors */"./node_modules/@notionhq/client/build/src/errors.js");Object.defineProperty(t,"APIErrorCode",{enumerable:!0,get:function(){return s.APIErrorCode}}),Object.defineProperty(t,"ClientErrorCode",{enumerable:!0,get:function(){return s.ClientErrorCode}}),Object.defineProperty(t,"APIResponseError",{enumerable:!0,get:function(){return s.APIResponseError}}),Object.defineProperty(t,"UnknownHTTPResponseError",{enumerable:!0,get:function(){return s.UnknownHTTPResponseError}}),Object.defineProperty(t,"RequestTimeoutError",{enumerable:!0,get:function(){return s.RequestTimeoutError}}),Object.defineProperty(t,"isNotionClientError",{enumerable:!0,get:function(){return s.isNotionClientError}});var i=r(/*! ./helpers */"./node_modules/@notionhq/client/build/src/helpers.js");Object.defineProperty(t,"collectPaginatedAPI",{enumerable:!0,get:function(){return i.collectPaginatedAPI}}),Object.defineProperty(t,"iteratePaginatedAPI",{enumerable:!0,get:function(){return i.iteratePaginatedAPI}}),Object.defineProperty(t,"isFullBlock",{enumerable:!0,get:function(){return i.isFullBlock}}),Object.defineProperty(t,"isFullDatabase",{enumerable:!0,get:function(){return i.isFullDatabase}}),Object.defineProperty(t,"isFullPage",{enumerable:!0,get:function(){return i.isFullPage}}),Object.defineProperty(t,"isFullUser",{enumerable:!0,get:function(){return i.isFullUser}}),Object.defineProperty(t,"isFullComment",{enumerable:!0,get:function(){return i.isFullComment}}),Object.defineProperty(t,"isFullPageOrDatabase",{enumerable:!0,get:function(){return i.isFullPageOrDatabase}})},"./node_modules/@notionhq/client/build/src/logging.js":
/*!************************************************************!*\
  !*** ./node_modules/@notionhq/client/build/src/logging.js ***!
  \************************************************************/(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.logLevelSeverity=t.makeConsoleLogger=t.LogLevel=void 0;const a=r(/*! ./utils */"./node_modules/@notionhq/client/build/src/utils.js");var o;!function(e){e.DEBUG="debug",e.INFO="info",e.WARN="warn",e.ERROR="error"}(o=t.LogLevel||(t.LogLevel={})),t.makeConsoleLogger=function(e){return(t,r,a)=>{console[t](`${e} ${t}:`,r,a)}},t.logLevelSeverity=function(e){switch(e){case o.DEBUG:return 20;case o.INFO:return 40;case o.WARN:return 60;case o.ERROR:return 80;default:return(0,a.assertNever)(e)}}},"./node_modules/@notionhq/client/build/src/utils.js":
/*!**********************************************************!*\
  !*** ./node_modules/@notionhq/client/build/src/utils.js ***!
  \**********************************************************/(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.isObject=t.pick=t.assertNever=void 0,t.assertNever=function(e){throw new Error(`Unexpected value should never occur: ${e}`)},t.pick=function(e,t){const r=t.map((t=>[t,null==e?void 0:e[t]]));return Object.fromEntries(r)},t.isObject=function(e){return"object"==typeof e&&null!==e}},"./node_modules/node-fetch/browser.js":
/*!********************************************!*\
  !*** ./node_modules/node-fetch/browser.js ***!
  \********************************************/(e,t,r)=>{var a=function(){if("undefined"!=typeof self)return self;if("undefined"!=typeof window)return window;if(void 0!==r.g)return r.g;throw new Error("unable to locate global object")}();e.exports=t=a.fetch,a.fetch&&(t.default=a.fetch.bind(a)),t.Headers=a.Headers,t.Request=a.Request,t.Response=a.Response},"./node_modules/@notionhq/client/build/package.json":
/*!**********************************************************!*\
  !*** ./node_modules/@notionhq/client/build/package.json ***!
  \**********************************************************/e=>{e.exports=JSON.parse('{"name":"@notionhq/client","version":"2.2.13","description":"A simple and easy to use client for the Notion API","engines":{"node":">=12"},"homepage":"https://developers.notion.com/docs/getting-started","bugs":{"url":"https://github.com/makenotion/notion-sdk-js/issues"},"repository":{"type":"git","url":"https://github.com/makenotion/notion-sdk-js/"},"keywords":["notion","notionapi","rest","notion-api"],"main":"./build/src","types":"./build/src/index.d.ts","scripts":{"prepare":"npm run build","prepublishOnly":"npm run checkLoggedIn && npm run lint && npm run test","build":"tsc","prettier":"prettier --write .","lint":"prettier --check . && eslint . --ext .ts && cspell \'**/*\' ","test":"jest ./test","check-links":"git ls-files | grep md$ | xargs -n 1 markdown-link-check","prebuild":"npm run clean","clean":"rm -rf ./build","checkLoggedIn":"./scripts/verifyLoggedIn.sh"},"author":"","license":"MIT","files":["build/package.json","build/src/**"],"dependencies":{"@types/node-fetch":"^2.5.10","node-fetch":"^2.6.1"},"devDependencies":{"@types/jest":"^28.1.4","@typescript-eslint/eslint-plugin":"^5.39.0","@typescript-eslint/parser":"^5.39.0","cspell":"^5.4.1","eslint":"^7.24.0","jest":"^28.1.2","markdown-link-check":"^3.8.7","prettier":"^2.8.8","ts-jest":"^28.0.5","typescript":"^4.8.4"}}')}},t={};function r(a){var o=t[a];if(void 0!==o)return o.exports;var s=t[a]={exports:{}};return e[a].call(s.exports,s,s.exports,r),s.exports}r.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),r.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var a={};(()=>{
/*!*************************!*\
  !*** ./src/ts/popup.ts ***!
  \*************************/
r.r(a);var e=r(/*! @notionhq/client */"./node_modules/@notionhq/client/build/src/index.js"),t=function(e,t,r,a){return new(r||(r=Promise))((function(o,s){function i(e){try{l(a.next(e))}catch(e){s(e)}}function n(e){try{l(a.throw(e))}catch(e){s(e)}}function l(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(i,n)}l((a=a.apply(e,t||[])).next())}))};function o(){const e=new Date;return`${e.getFullYear()}-${String(e.getMonth()+1).padStart(2,"0")}-${String(e.getDate()).padStart(2,"0")}`}function s(e){return new Promise(((t,r)=>{chrome.storage.local.get(e,(e=>{chrome.runtime.lastError?r(new Error(chrome.runtime.lastError.message)):t(e)}))}))}document.getElementById("save2notion").addEventListener("click",(function(){!function(){t(this,void 0,void 0,(function*(){try{const t=yield s("databaseID"),r=yield s("nToken"),a=yield s("selectedText");let i=a?JSON.parse(a.selectedText):[];const n=new e.Client({auth:r.nToken}),l=i.map((e=>{const r={context:{title:[{text:{content:e.text}}]},url:{url:e.url},date:{date:{start:o()}}};return n.pages.create({parent:{database_id:t.databaseID},properties:r})}));yield Promise.all(l),document.getElementById("save2notion").style.backgroundColor="#cecece",alert("Saved to Notion successfully!")}catch(e){console.error(e),alert("Error saving to Notion")}}))}()}));document.getElementById("clearAllBtn").addEventListener("click",(function(){chrome.storage.local.remove("selectedText",(function(){chrome.tabs.query({active:!0,currentWindow:!0},(function(e){chrome.tabs.sendMessage(e[0].id,{action:"clearHighlights"})}));const e=document.getElementById("highlight-list");e&&(e.innerHTML="")}))})),document.addEventListener("DOMContentLoaded",(function(){const e=document.getElementById("highlight-list");chrome.storage.local.get("selectedText",(function(t){if(t.selectedText){const r=JSON.parse(t.selectedText);console.log("data.selectedText"+t.selectedText),r.forEach((function(t,a){const o=document.createElement("div");o.classList.add("highlight-item");const s=document.createElement("span");s.classList.add("highlight-text"),s.textContent=t.text.substring(0,15)+"...",o.appendChild(s);const i=document.createElement("button");i.textContent="Delete",i.classList.add("delete-button"),i.onclick=function(){chrome.tabs.query({active:!0,currentWindow:!0},(function(e){chrome.tabs.sendMessage(e[0].id,{action:"deleteHighlight",highlightId:t.id})})),r.splice(a,1),chrome.storage.local.set({selectedText:JSON.stringify(r)}),o.remove()},o.appendChild(i),e.appendChild(o)}))}}))}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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T0FBT1osRUFBTyxHQUN0Qm5DLE9BQU9DLFFBQVFDLE1BQU1qUSxJQUFJLENBQUUsYUFBZ0J5RixLQUFLQyxVQUFVc00sS0FFMURHLEVBQVliLFFBQ2hCLEVBQ0FhLEVBQVlPLFlBQVlDLEdBQ3hCZCxFQUFZYSxZQUFZUCxFQUM1QixHQUNKLENBQ0osR0FDSixHIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc2F2ZV9wYWdlX2NvbnRlbnRfZ2x1Z2luLy4vbm9kZV9tb2R1bGVzL0Bub3Rpb25ocS9jbGllbnQvYnVpbGQvc3JjL0NsaWVudC5qcyIsIndlYnBhY2s6Ly9zYXZlX3BhZ2VfY29udGVudF9nbHVnaW4vLi9ub2RlX21vZHVsZXMvQG5vdGlvbmhxL2NsaWVudC9idWlsZC9zcmMvYXBpLWVuZHBvaW50cy5qcyIsIndlYnBhY2s6Ly9zYXZlX3BhZ2VfY29udGVudF9nbHVnaW4vLi9ub2RlX21vZHVsZXMvQG5vdGlvbmhxL2NsaWVudC9idWlsZC9zcmMvZXJyb3JzLmpzIiwid2VicGFjazovL3NhdmVfcGFnZV9jb250ZW50X2dsdWdpbi8uL25vZGVfbW9kdWxlcy9Abm90aW9uaHEvY2xpZW50L2J1aWxkL3NyYy9oZWxwZXJzLmpzIiwid2VicGFjazovL3NhdmVfcGFnZV9jb250ZW50X2dsdWdpbi8uL25vZGVfbW9kdWxlcy9Abm90aW9uaHEvY2xpZW50L2J1aWxkL3NyYy9pbmRleC5qcyIsIndlYnBhY2s6Ly9zYXZlX3BhZ2VfY29udGVudF9nbHVnaW4vLi9ub2RlX21vZHVsZXMvQG5vdGlvbmhxL2NsaWVudC9idWlsZC9zcmMvbG9nZ2luZy5qcyIsIndlYnBhY2s6Ly9zYXZlX3BhZ2VfY29udGVudF9nbHVnaW4vLi9ub2RlX21vZHVsZXMvQG5vdGlvbmhxL2NsaWVudC9idWlsZC9zcmMvdXRpbHMuanMiLCJ3ZWJwYWNrOi8vc2F2ZV9wYWdlX2NvbnRlbnRfZ2x1Z2luLy4vbm9kZV9tb2R1bGVzL25vZGUtZmV0Y2gvYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly9zYXZlX3BhZ2VfY29udGVudF9nbHVnaW4vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vc2F2ZV9wYWdlX2NvbnRlbnRfZ2x1Z2luL3dlYnBhY2svcnVudGltZS9nbG9iYWwiLCJ3ZWJwYWNrOi8vc2F2ZV9wYWdlX2NvbnRlbnRfZ2x1Z2luL3dlYnBhY2svcnVudGltZS9tYWtlIG5hbWVzcGFjZSBvYmplY3QiLCJ3ZWJwYWNrOi8vc2F2ZV9wYWdlX2NvbnRlbnRfZ2x1Z2luLy4vc3JjL3RzL3BvcHVwLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fY2xhc3NQcml2YXRlRmllbGRTZXQgPSAodGhpcyAmJiB0aGlzLl9fY2xhc3NQcml2YXRlRmllbGRTZXQpIHx8IGZ1bmN0aW9uIChyZWNlaXZlciwgc3RhdGUsIHZhbHVlLCBraW5kLCBmKSB7XG4gICAgaWYgKGtpbmQgPT09IFwibVwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUHJpdmF0ZSBtZXRob2QgaXMgbm90IHdyaXRhYmxlXCIpO1xuICAgIGlmIChraW5kID09PSBcImFcIiAmJiAhZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgYWNjZXNzb3Igd2FzIGRlZmluZWQgd2l0aG91dCBhIHNldHRlclwiKTtcbiAgICBpZiAodHlwZW9mIHN0YXRlID09PSBcImZ1bmN0aW9uXCIgPyByZWNlaXZlciAhPT0gc3RhdGUgfHwgIWYgOiAhc3RhdGUuaGFzKHJlY2VpdmVyKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCB3cml0ZSBwcml2YXRlIG1lbWJlciB0byBhbiBvYmplY3Qgd2hvc2UgY2xhc3MgZGlkIG5vdCBkZWNsYXJlIGl0XCIpO1xuICAgIHJldHVybiAoa2luZCA9PT0gXCJhXCIgPyBmLmNhbGwocmVjZWl2ZXIsIHZhbHVlKSA6IGYgPyBmLnZhbHVlID0gdmFsdWUgOiBzdGF0ZS5zZXQocmVjZWl2ZXIsIHZhbHVlKSksIHZhbHVlO1xufTtcbnZhciBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0ID0gKHRoaXMgJiYgdGhpcy5fX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KSB8fCBmdW5jdGlvbiAocmVjZWl2ZXIsIHN0YXRlLCBraW5kLCBmKSB7XG4gICAgaWYgKGtpbmQgPT09IFwiYVwiICYmICFmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUHJpdmF0ZSBhY2Nlc3NvciB3YXMgZGVmaW5lZCB3aXRob3V0IGEgZ2V0dGVyXCIpO1xuICAgIGlmICh0eXBlb2Ygc3RhdGUgPT09IFwiZnVuY3Rpb25cIiA/IHJlY2VpdmVyICE9PSBzdGF0ZSB8fCAhZiA6ICFzdGF0ZS5oYXMocmVjZWl2ZXIpKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IHJlYWQgcHJpdmF0ZSBtZW1iZXIgZnJvbSBhbiBvYmplY3Qgd2hvc2UgY2xhc3MgZGlkIG5vdCBkZWNsYXJlIGl0XCIpO1xuICAgIHJldHVybiBraW5kID09PSBcIm1cIiA/IGYgOiBraW5kID09PSBcImFcIiA/IGYuY2FsbChyZWNlaXZlcikgOiBmID8gZi52YWx1ZSA6IHN0YXRlLmdldChyZWNlaXZlcik7XG59O1xudmFyIF9DbGllbnRfYXV0aCwgX0NsaWVudF9sb2dMZXZlbCwgX0NsaWVudF9sb2dnZXIsIF9DbGllbnRfcHJlZml4VXJsLCBfQ2xpZW50X3RpbWVvdXRNcywgX0NsaWVudF9ub3Rpb25WZXJzaW9uLCBfQ2xpZW50X2ZldGNoLCBfQ2xpZW50X2FnZW50LCBfQ2xpZW50X3VzZXJBZ2VudDtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IGxvZ2dpbmdfMSA9IHJlcXVpcmUoXCIuL2xvZ2dpbmdcIik7XG5jb25zdCBlcnJvcnNfMSA9IHJlcXVpcmUoXCIuL2Vycm9yc1wiKTtcbmNvbnN0IHV0aWxzXzEgPSByZXF1aXJlKFwiLi91dGlsc1wiKTtcbmNvbnN0IGFwaV9lbmRwb2ludHNfMSA9IHJlcXVpcmUoXCIuL2FwaS1lbmRwb2ludHNcIik7XG5jb25zdCBub2RlX2ZldGNoXzEgPSByZXF1aXJlKFwibm9kZS1mZXRjaFwiKTtcbmNvbnN0IHBhY2thZ2VfanNvbl8xID0gcmVxdWlyZShcIi4uL3BhY2thZ2UuanNvblwiKTtcbmNsYXNzIENsaWVudCB7XG4gICAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuICAgICAgICB2YXIgX2EsIF9iLCBfYywgX2QsIF9lLCBfZjtcbiAgICAgICAgX0NsaWVudF9hdXRoLnNldCh0aGlzLCB2b2lkIDApO1xuICAgICAgICBfQ2xpZW50X2xvZ0xldmVsLnNldCh0aGlzLCB2b2lkIDApO1xuICAgICAgICBfQ2xpZW50X2xvZ2dlci5zZXQodGhpcywgdm9pZCAwKTtcbiAgICAgICAgX0NsaWVudF9wcmVmaXhVcmwuc2V0KHRoaXMsIHZvaWQgMCk7XG4gICAgICAgIF9DbGllbnRfdGltZW91dE1zLnNldCh0aGlzLCB2b2lkIDApO1xuICAgICAgICBfQ2xpZW50X25vdGlvblZlcnNpb24uc2V0KHRoaXMsIHZvaWQgMCk7XG4gICAgICAgIF9DbGllbnRfZmV0Y2guc2V0KHRoaXMsIHZvaWQgMCk7XG4gICAgICAgIF9DbGllbnRfYWdlbnQuc2V0KHRoaXMsIHZvaWQgMCk7XG4gICAgICAgIF9DbGllbnRfdXNlckFnZW50LnNldCh0aGlzLCB2b2lkIDApO1xuICAgICAgICAvKlxuICAgICAgICAgKiBOb3Rpb24gQVBJIGVuZHBvaW50c1xuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5ibG9ja3MgPSB7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFJldHJpZXZlIGJsb2NrXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHJldHJpZXZlOiAoYXJncykgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnJlcXVlc3Qoe1xuICAgICAgICAgICAgICAgICAgICBwYXRoOiBhcGlfZW5kcG9pbnRzXzEuZ2V0QmxvY2sucGF0aChhcmdzKSxcbiAgICAgICAgICAgICAgICAgICAgbWV0aG9kOiBhcGlfZW5kcG9pbnRzXzEuZ2V0QmxvY2subWV0aG9kLFxuICAgICAgICAgICAgICAgICAgICBxdWVyeTogKDAsIHV0aWxzXzEucGljaykoYXJncywgYXBpX2VuZHBvaW50c18xLmdldEJsb2NrLnF1ZXJ5UGFyYW1zKSxcbiAgICAgICAgICAgICAgICAgICAgYm9keTogKDAsIHV0aWxzXzEucGljaykoYXJncywgYXBpX2VuZHBvaW50c18xLmdldEJsb2NrLmJvZHlQYXJhbXMpLFxuICAgICAgICAgICAgICAgICAgICBhdXRoOiBhcmdzID09PSBudWxsIHx8IGFyZ3MgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGFyZ3MuYXV0aCxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFVwZGF0ZSBibG9ja1xuICAgICAgICAgICAgICovXG4gICAgICAgICAgICB1cGRhdGU6IChhcmdzKSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucmVxdWVzdCh7XG4gICAgICAgICAgICAgICAgICAgIHBhdGg6IGFwaV9lbmRwb2ludHNfMS51cGRhdGVCbG9jay5wYXRoKGFyZ3MpLFxuICAgICAgICAgICAgICAgICAgICBtZXRob2Q6IGFwaV9lbmRwb2ludHNfMS51cGRhdGVCbG9jay5tZXRob2QsXG4gICAgICAgICAgICAgICAgICAgIHF1ZXJ5OiAoMCwgdXRpbHNfMS5waWNrKShhcmdzLCBhcGlfZW5kcG9pbnRzXzEudXBkYXRlQmxvY2sucXVlcnlQYXJhbXMpLFxuICAgICAgICAgICAgICAgICAgICBib2R5OiAoMCwgdXRpbHNfMS5waWNrKShhcmdzLCBhcGlfZW5kcG9pbnRzXzEudXBkYXRlQmxvY2suYm9keVBhcmFtcyksXG4gICAgICAgICAgICAgICAgICAgIGF1dGg6IGFyZ3MgPT09IG51bGwgfHwgYXJncyA9PT0gdm9pZCAwID8gdm9pZCAwIDogYXJncy5hdXRoLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogRGVsZXRlIGJsb2NrXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGRlbGV0ZTogKGFyZ3MpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KHtcbiAgICAgICAgICAgICAgICAgICAgcGF0aDogYXBpX2VuZHBvaW50c18xLmRlbGV0ZUJsb2NrLnBhdGgoYXJncyksXG4gICAgICAgICAgICAgICAgICAgIG1ldGhvZDogYXBpX2VuZHBvaW50c18xLmRlbGV0ZUJsb2NrLm1ldGhvZCxcbiAgICAgICAgICAgICAgICAgICAgcXVlcnk6ICgwLCB1dGlsc18xLnBpY2spKGFyZ3MsIGFwaV9lbmRwb2ludHNfMS5kZWxldGVCbG9jay5xdWVyeVBhcmFtcyksXG4gICAgICAgICAgICAgICAgICAgIGJvZHk6ICgwLCB1dGlsc18xLnBpY2spKGFyZ3MsIGFwaV9lbmRwb2ludHNfMS5kZWxldGVCbG9jay5ib2R5UGFyYW1zKSxcbiAgICAgICAgICAgICAgICAgICAgYXV0aDogYXJncyA9PT0gbnVsbCB8fCBhcmdzID09PSB2b2lkIDAgPyB2b2lkIDAgOiBhcmdzLmF1dGgsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgY2hpbGRyZW46IHtcbiAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgKiBBcHBlbmQgYmxvY2sgY2hpbGRyZW5cbiAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICBhcHBlbmQ6IChhcmdzKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnJlcXVlc3Qoe1xuICAgICAgICAgICAgICAgICAgICAgICAgcGF0aDogYXBpX2VuZHBvaW50c18xLmFwcGVuZEJsb2NrQ2hpbGRyZW4ucGF0aChhcmdzKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1ldGhvZDogYXBpX2VuZHBvaW50c18xLmFwcGVuZEJsb2NrQ2hpbGRyZW4ubWV0aG9kLFxuICAgICAgICAgICAgICAgICAgICAgICAgcXVlcnk6ICgwLCB1dGlsc18xLnBpY2spKGFyZ3MsIGFwaV9lbmRwb2ludHNfMS5hcHBlbmRCbG9ja0NoaWxkcmVuLnF1ZXJ5UGFyYW1zKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGJvZHk6ICgwLCB1dGlsc18xLnBpY2spKGFyZ3MsIGFwaV9lbmRwb2ludHNfMS5hcHBlbmRCbG9ja0NoaWxkcmVuLmJvZHlQYXJhbXMpLFxuICAgICAgICAgICAgICAgICAgICAgICAgYXV0aDogYXJncyA9PT0gbnVsbCB8fCBhcmdzID09PSB2b2lkIDAgPyB2b2lkIDAgOiBhcmdzLmF1dGgsXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICogUmV0cmlldmUgYmxvY2sgY2hpbGRyZW5cbiAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICBsaXN0OiAoYXJncykgPT4ge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhdGg6IGFwaV9lbmRwb2ludHNfMS5saXN0QmxvY2tDaGlsZHJlbi5wYXRoKGFyZ3MpLFxuICAgICAgICAgICAgICAgICAgICAgICAgbWV0aG9kOiBhcGlfZW5kcG9pbnRzXzEubGlzdEJsb2NrQ2hpbGRyZW4ubWV0aG9kLFxuICAgICAgICAgICAgICAgICAgICAgICAgcXVlcnk6ICgwLCB1dGlsc18xLnBpY2spKGFyZ3MsIGFwaV9lbmRwb2ludHNfMS5saXN0QmxvY2tDaGlsZHJlbi5xdWVyeVBhcmFtcyksXG4gICAgICAgICAgICAgICAgICAgICAgICBib2R5OiAoMCwgdXRpbHNfMS5waWNrKShhcmdzLCBhcGlfZW5kcG9pbnRzXzEubGlzdEJsb2NrQ2hpbGRyZW4uYm9keVBhcmFtcyksXG4gICAgICAgICAgICAgICAgICAgICAgICBhdXRoOiBhcmdzID09PSBudWxsIHx8IGFyZ3MgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGFyZ3MuYXV0aCxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuZGF0YWJhc2VzID0ge1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBMaXN0IGRhdGFiYXNlc1xuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIEBkZXByZWNhdGVkIFBsZWFzZSB1c2UgYHNlYXJjaGBcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgbGlzdDogKGFyZ3MpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KHtcbiAgICAgICAgICAgICAgICAgICAgcGF0aDogYXBpX2VuZHBvaW50c18xLmxpc3REYXRhYmFzZXMucGF0aCgpLFxuICAgICAgICAgICAgICAgICAgICBtZXRob2Q6IGFwaV9lbmRwb2ludHNfMS5saXN0RGF0YWJhc2VzLm1ldGhvZCxcbiAgICAgICAgICAgICAgICAgICAgcXVlcnk6ICgwLCB1dGlsc18xLnBpY2spKGFyZ3MsIGFwaV9lbmRwb2ludHNfMS5saXN0RGF0YWJhc2VzLnF1ZXJ5UGFyYW1zKSxcbiAgICAgICAgICAgICAgICAgICAgYm9keTogKDAsIHV0aWxzXzEucGljaykoYXJncywgYXBpX2VuZHBvaW50c18xLmxpc3REYXRhYmFzZXMuYm9keVBhcmFtcyksXG4gICAgICAgICAgICAgICAgICAgIGF1dGg6IGFyZ3MgPT09IG51bGwgfHwgYXJncyA9PT0gdm9pZCAwID8gdm9pZCAwIDogYXJncy5hdXRoLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogUmV0cmlldmUgYSBkYXRhYmFzZVxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICByZXRyaWV2ZTogKGFyZ3MpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KHtcbiAgICAgICAgICAgICAgICAgICAgcGF0aDogYXBpX2VuZHBvaW50c18xLmdldERhdGFiYXNlLnBhdGgoYXJncyksXG4gICAgICAgICAgICAgICAgICAgIG1ldGhvZDogYXBpX2VuZHBvaW50c18xLmdldERhdGFiYXNlLm1ldGhvZCxcbiAgICAgICAgICAgICAgICAgICAgcXVlcnk6ICgwLCB1dGlsc18xLnBpY2spKGFyZ3MsIGFwaV9lbmRwb2ludHNfMS5nZXREYXRhYmFzZS5xdWVyeVBhcmFtcyksXG4gICAgICAgICAgICAgICAgICAgIGJvZHk6ICgwLCB1dGlsc18xLnBpY2spKGFyZ3MsIGFwaV9lbmRwb2ludHNfMS5nZXREYXRhYmFzZS5ib2R5UGFyYW1zKSxcbiAgICAgICAgICAgICAgICAgICAgYXV0aDogYXJncyA9PT0gbnVsbCB8fCBhcmdzID09PSB2b2lkIDAgPyB2b2lkIDAgOiBhcmdzLmF1dGgsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBRdWVyeSBhIGRhdGFiYXNlXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHF1ZXJ5OiAoYXJncykgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnJlcXVlc3Qoe1xuICAgICAgICAgICAgICAgICAgICBwYXRoOiBhcGlfZW5kcG9pbnRzXzEucXVlcnlEYXRhYmFzZS5wYXRoKGFyZ3MpLFxuICAgICAgICAgICAgICAgICAgICBtZXRob2Q6IGFwaV9lbmRwb2ludHNfMS5xdWVyeURhdGFiYXNlLm1ldGhvZCxcbiAgICAgICAgICAgICAgICAgICAgcXVlcnk6ICgwLCB1dGlsc18xLnBpY2spKGFyZ3MsIGFwaV9lbmRwb2ludHNfMS5xdWVyeURhdGFiYXNlLnF1ZXJ5UGFyYW1zKSxcbiAgICAgICAgICAgICAgICAgICAgYm9keTogKDAsIHV0aWxzXzEucGljaykoYXJncywgYXBpX2VuZHBvaW50c18xLnF1ZXJ5RGF0YWJhc2UuYm9keVBhcmFtcyksXG4gICAgICAgICAgICAgICAgICAgIGF1dGg6IGFyZ3MgPT09IG51bGwgfHwgYXJncyA9PT0gdm9pZCAwID8gdm9pZCAwIDogYXJncy5hdXRoLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQ3JlYXRlIGEgZGF0YWJhc2VcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgY3JlYXRlOiAoYXJncykgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnJlcXVlc3Qoe1xuICAgICAgICAgICAgICAgICAgICBwYXRoOiBhcGlfZW5kcG9pbnRzXzEuY3JlYXRlRGF0YWJhc2UucGF0aCgpLFxuICAgICAgICAgICAgICAgICAgICBtZXRob2Q6IGFwaV9lbmRwb2ludHNfMS5jcmVhdGVEYXRhYmFzZS5tZXRob2QsXG4gICAgICAgICAgICAgICAgICAgIHF1ZXJ5OiAoMCwgdXRpbHNfMS5waWNrKShhcmdzLCBhcGlfZW5kcG9pbnRzXzEuY3JlYXRlRGF0YWJhc2UucXVlcnlQYXJhbXMpLFxuICAgICAgICAgICAgICAgICAgICBib2R5OiAoMCwgdXRpbHNfMS5waWNrKShhcmdzLCBhcGlfZW5kcG9pbnRzXzEuY3JlYXRlRGF0YWJhc2UuYm9keVBhcmFtcyksXG4gICAgICAgICAgICAgICAgICAgIGF1dGg6IGFyZ3MgPT09IG51bGwgfHwgYXJncyA9PT0gdm9pZCAwID8gdm9pZCAwIDogYXJncy5hdXRoLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogVXBkYXRlIGEgZGF0YWJhc2VcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgdXBkYXRlOiAoYXJncykgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnJlcXVlc3Qoe1xuICAgICAgICAgICAgICAgICAgICBwYXRoOiBhcGlfZW5kcG9pbnRzXzEudXBkYXRlRGF0YWJhc2UucGF0aChhcmdzKSxcbiAgICAgICAgICAgICAgICAgICAgbWV0aG9kOiBhcGlfZW5kcG9pbnRzXzEudXBkYXRlRGF0YWJhc2UubWV0aG9kLFxuICAgICAgICAgICAgICAgICAgICBxdWVyeTogKDAsIHV0aWxzXzEucGljaykoYXJncywgYXBpX2VuZHBvaW50c18xLnVwZGF0ZURhdGFiYXNlLnF1ZXJ5UGFyYW1zKSxcbiAgICAgICAgICAgICAgICAgICAgYm9keTogKDAsIHV0aWxzXzEucGljaykoYXJncywgYXBpX2VuZHBvaW50c18xLnVwZGF0ZURhdGFiYXNlLmJvZHlQYXJhbXMpLFxuICAgICAgICAgICAgICAgICAgICBhdXRoOiBhcmdzID09PSBudWxsIHx8IGFyZ3MgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGFyZ3MuYXV0aCxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH07XG4gICAgICAgIHRoaXMucGFnZXMgPSB7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIENyZWF0ZSBhIHBhZ2VcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgY3JlYXRlOiAoYXJncykgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnJlcXVlc3Qoe1xuICAgICAgICAgICAgICAgICAgICBwYXRoOiBhcGlfZW5kcG9pbnRzXzEuY3JlYXRlUGFnZS5wYXRoKCksXG4gICAgICAgICAgICAgICAgICAgIG1ldGhvZDogYXBpX2VuZHBvaW50c18xLmNyZWF0ZVBhZ2UubWV0aG9kLFxuICAgICAgICAgICAgICAgICAgICBxdWVyeTogKDAsIHV0aWxzXzEucGljaykoYXJncywgYXBpX2VuZHBvaW50c18xLmNyZWF0ZVBhZ2UucXVlcnlQYXJhbXMpLFxuICAgICAgICAgICAgICAgICAgICBib2R5OiAoMCwgdXRpbHNfMS5waWNrKShhcmdzLCBhcGlfZW5kcG9pbnRzXzEuY3JlYXRlUGFnZS5ib2R5UGFyYW1zKSxcbiAgICAgICAgICAgICAgICAgICAgYXV0aDogYXJncyA9PT0gbnVsbCB8fCBhcmdzID09PSB2b2lkIDAgPyB2b2lkIDAgOiBhcmdzLmF1dGgsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBSZXRyaWV2ZSBhIHBhZ2VcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgcmV0cmlldmU6IChhcmdzKSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucmVxdWVzdCh7XG4gICAgICAgICAgICAgICAgICAgIHBhdGg6IGFwaV9lbmRwb2ludHNfMS5nZXRQYWdlLnBhdGgoYXJncyksXG4gICAgICAgICAgICAgICAgICAgIG1ldGhvZDogYXBpX2VuZHBvaW50c18xLmdldFBhZ2UubWV0aG9kLFxuICAgICAgICAgICAgICAgICAgICBxdWVyeTogKDAsIHV0aWxzXzEucGljaykoYXJncywgYXBpX2VuZHBvaW50c18xLmdldFBhZ2UucXVlcnlQYXJhbXMpLFxuICAgICAgICAgICAgICAgICAgICBib2R5OiAoMCwgdXRpbHNfMS5waWNrKShhcmdzLCBhcGlfZW5kcG9pbnRzXzEuZ2V0UGFnZS5ib2R5UGFyYW1zKSxcbiAgICAgICAgICAgICAgICAgICAgYXV0aDogYXJncyA9PT0gbnVsbCB8fCBhcmdzID09PSB2b2lkIDAgPyB2b2lkIDAgOiBhcmdzLmF1dGgsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBVcGRhdGUgcGFnZSBwcm9wZXJ0aWVzXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHVwZGF0ZTogKGFyZ3MpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KHtcbiAgICAgICAgICAgICAgICAgICAgcGF0aDogYXBpX2VuZHBvaW50c18xLnVwZGF0ZVBhZ2UucGF0aChhcmdzKSxcbiAgICAgICAgICAgICAgICAgICAgbWV0aG9kOiBhcGlfZW5kcG9pbnRzXzEudXBkYXRlUGFnZS5tZXRob2QsXG4gICAgICAgICAgICAgICAgICAgIHF1ZXJ5OiAoMCwgdXRpbHNfMS5waWNrKShhcmdzLCBhcGlfZW5kcG9pbnRzXzEudXBkYXRlUGFnZS5xdWVyeVBhcmFtcyksXG4gICAgICAgICAgICAgICAgICAgIGJvZHk6ICgwLCB1dGlsc18xLnBpY2spKGFyZ3MsIGFwaV9lbmRwb2ludHNfMS51cGRhdGVQYWdlLmJvZHlQYXJhbXMpLFxuICAgICAgICAgICAgICAgICAgICBhdXRoOiBhcmdzID09PSBudWxsIHx8IGFyZ3MgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGFyZ3MuYXV0aCxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBwcm9wZXJ0aWVzOiB7XG4gICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICogUmV0cmlldmUgcGFnZSBwcm9wZXJ0eVxuICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgIHJldHJpZXZlOiAoYXJncykgPT4ge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhdGg6IGFwaV9lbmRwb2ludHNfMS5nZXRQYWdlUHJvcGVydHkucGF0aChhcmdzKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1ldGhvZDogYXBpX2VuZHBvaW50c18xLmdldFBhZ2VQcm9wZXJ0eS5tZXRob2QsXG4gICAgICAgICAgICAgICAgICAgICAgICBxdWVyeTogKDAsIHV0aWxzXzEucGljaykoYXJncywgYXBpX2VuZHBvaW50c18xLmdldFBhZ2VQcm9wZXJ0eS5xdWVyeVBhcmFtcyksXG4gICAgICAgICAgICAgICAgICAgICAgICBib2R5OiAoMCwgdXRpbHNfMS5waWNrKShhcmdzLCBhcGlfZW5kcG9pbnRzXzEuZ2V0UGFnZVByb3BlcnR5LmJvZHlQYXJhbXMpLFxuICAgICAgICAgICAgICAgICAgICAgICAgYXV0aDogYXJncyA9PT0gbnVsbCB8fCBhcmdzID09PSB2b2lkIDAgPyB2b2lkIDAgOiBhcmdzLmF1dGgsXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICB9O1xuICAgICAgICB0aGlzLnVzZXJzID0ge1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBSZXRyaWV2ZSBhIHVzZXJcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgcmV0cmlldmU6IChhcmdzKSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucmVxdWVzdCh7XG4gICAgICAgICAgICAgICAgICAgIHBhdGg6IGFwaV9lbmRwb2ludHNfMS5nZXRVc2VyLnBhdGgoYXJncyksXG4gICAgICAgICAgICAgICAgICAgIG1ldGhvZDogYXBpX2VuZHBvaW50c18xLmdldFVzZXIubWV0aG9kLFxuICAgICAgICAgICAgICAgICAgICBxdWVyeTogKDAsIHV0aWxzXzEucGljaykoYXJncywgYXBpX2VuZHBvaW50c18xLmdldFVzZXIucXVlcnlQYXJhbXMpLFxuICAgICAgICAgICAgICAgICAgICBib2R5OiAoMCwgdXRpbHNfMS5waWNrKShhcmdzLCBhcGlfZW5kcG9pbnRzXzEuZ2V0VXNlci5ib2R5UGFyYW1zKSxcbiAgICAgICAgICAgICAgICAgICAgYXV0aDogYXJncyA9PT0gbnVsbCB8fCBhcmdzID09PSB2b2lkIDAgPyB2b2lkIDAgOiBhcmdzLmF1dGgsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBMaXN0IGFsbCB1c2Vyc1xuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBsaXN0OiAoYXJncykgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnJlcXVlc3Qoe1xuICAgICAgICAgICAgICAgICAgICBwYXRoOiBhcGlfZW5kcG9pbnRzXzEubGlzdFVzZXJzLnBhdGgoKSxcbiAgICAgICAgICAgICAgICAgICAgbWV0aG9kOiBhcGlfZW5kcG9pbnRzXzEubGlzdFVzZXJzLm1ldGhvZCxcbiAgICAgICAgICAgICAgICAgICAgcXVlcnk6ICgwLCB1dGlsc18xLnBpY2spKGFyZ3MsIGFwaV9lbmRwb2ludHNfMS5saXN0VXNlcnMucXVlcnlQYXJhbXMpLFxuICAgICAgICAgICAgICAgICAgICBib2R5OiAoMCwgdXRpbHNfMS5waWNrKShhcmdzLCBhcGlfZW5kcG9pbnRzXzEubGlzdFVzZXJzLmJvZHlQYXJhbXMpLFxuICAgICAgICAgICAgICAgICAgICBhdXRoOiBhcmdzID09PSBudWxsIHx8IGFyZ3MgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGFyZ3MuYXV0aCxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIEdldCBkZXRhaWxzIGFib3V0IGJvdFxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBtZTogKGFyZ3MpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KHtcbiAgICAgICAgICAgICAgICAgICAgcGF0aDogYXBpX2VuZHBvaW50c18xLmdldFNlbGYucGF0aCgpLFxuICAgICAgICAgICAgICAgICAgICBtZXRob2Q6IGFwaV9lbmRwb2ludHNfMS5nZXRTZWxmLm1ldGhvZCxcbiAgICAgICAgICAgICAgICAgICAgcXVlcnk6ICgwLCB1dGlsc18xLnBpY2spKGFyZ3MsIGFwaV9lbmRwb2ludHNfMS5nZXRTZWxmLnF1ZXJ5UGFyYW1zKSxcbiAgICAgICAgICAgICAgICAgICAgYm9keTogKDAsIHV0aWxzXzEucGljaykoYXJncywgYXBpX2VuZHBvaW50c18xLmdldFNlbGYuYm9keVBhcmFtcyksXG4gICAgICAgICAgICAgICAgICAgIGF1dGg6IGFyZ3MgPT09IG51bGwgfHwgYXJncyA9PT0gdm9pZCAwID8gdm9pZCAwIDogYXJncy5hdXRoLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5jb21tZW50cyA9IHtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQ3JlYXRlIGEgY29tbWVudFxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBjcmVhdGU6IChhcmdzKSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucmVxdWVzdCh7XG4gICAgICAgICAgICAgICAgICAgIHBhdGg6IGFwaV9lbmRwb2ludHNfMS5jcmVhdGVDb21tZW50LnBhdGgoKSxcbiAgICAgICAgICAgICAgICAgICAgbWV0aG9kOiBhcGlfZW5kcG9pbnRzXzEuY3JlYXRlQ29tbWVudC5tZXRob2QsXG4gICAgICAgICAgICAgICAgICAgIHF1ZXJ5OiAoMCwgdXRpbHNfMS5waWNrKShhcmdzLCBhcGlfZW5kcG9pbnRzXzEuY3JlYXRlQ29tbWVudC5xdWVyeVBhcmFtcyksXG4gICAgICAgICAgICAgICAgICAgIGJvZHk6ICgwLCB1dGlsc18xLnBpY2spKGFyZ3MsIGFwaV9lbmRwb2ludHNfMS5jcmVhdGVDb21tZW50LmJvZHlQYXJhbXMpLFxuICAgICAgICAgICAgICAgICAgICBhdXRoOiBhcmdzID09PSBudWxsIHx8IGFyZ3MgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGFyZ3MuYXV0aCxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIExpc3QgY29tbWVudHNcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgbGlzdDogKGFyZ3MpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KHtcbiAgICAgICAgICAgICAgICAgICAgcGF0aDogYXBpX2VuZHBvaW50c18xLmxpc3RDb21tZW50cy5wYXRoKCksXG4gICAgICAgICAgICAgICAgICAgIG1ldGhvZDogYXBpX2VuZHBvaW50c18xLmxpc3RDb21tZW50cy5tZXRob2QsXG4gICAgICAgICAgICAgICAgICAgIHF1ZXJ5OiAoMCwgdXRpbHNfMS5waWNrKShhcmdzLCBhcGlfZW5kcG9pbnRzXzEubGlzdENvbW1lbnRzLnF1ZXJ5UGFyYW1zKSxcbiAgICAgICAgICAgICAgICAgICAgYm9keTogKDAsIHV0aWxzXzEucGljaykoYXJncywgYXBpX2VuZHBvaW50c18xLmxpc3RDb21tZW50cy5ib2R5UGFyYW1zKSxcbiAgICAgICAgICAgICAgICAgICAgYXV0aDogYXJncyA9PT0gbnVsbCB8fCBhcmdzID09PSB2b2lkIDAgPyB2b2lkIDAgOiBhcmdzLmF1dGgsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICB9O1xuICAgICAgICAvKipcbiAgICAgICAgICogU2VhcmNoXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnNlYXJjaCA9IChhcmdzKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KHtcbiAgICAgICAgICAgICAgICBwYXRoOiBhcGlfZW5kcG9pbnRzXzEuc2VhcmNoLnBhdGgoKSxcbiAgICAgICAgICAgICAgICBtZXRob2Q6IGFwaV9lbmRwb2ludHNfMS5zZWFyY2gubWV0aG9kLFxuICAgICAgICAgICAgICAgIHF1ZXJ5OiAoMCwgdXRpbHNfMS5waWNrKShhcmdzLCBhcGlfZW5kcG9pbnRzXzEuc2VhcmNoLnF1ZXJ5UGFyYW1zKSxcbiAgICAgICAgICAgICAgICBib2R5OiAoMCwgdXRpbHNfMS5waWNrKShhcmdzLCBhcGlfZW5kcG9pbnRzXzEuc2VhcmNoLmJvZHlQYXJhbXMpLFxuICAgICAgICAgICAgICAgIGF1dGg6IGFyZ3MgPT09IG51bGwgfHwgYXJncyA9PT0gdm9pZCAwID8gdm9pZCAwIDogYXJncy5hdXRoLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMub2F1dGggPSB7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIEdldCB0b2tlblxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICB0b2tlbjogKGFyZ3MpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KHtcbiAgICAgICAgICAgICAgICAgICAgcGF0aDogYXBpX2VuZHBvaW50c18xLm9hdXRoVG9rZW4ucGF0aCgpLFxuICAgICAgICAgICAgICAgICAgICBtZXRob2Q6IGFwaV9lbmRwb2ludHNfMS5vYXV0aFRva2VuLm1ldGhvZCxcbiAgICAgICAgICAgICAgICAgICAgcXVlcnk6ICgwLCB1dGlsc18xLnBpY2spKGFyZ3MsIGFwaV9lbmRwb2ludHNfMS5vYXV0aFRva2VuLnF1ZXJ5UGFyYW1zKSxcbiAgICAgICAgICAgICAgICAgICAgYm9keTogKDAsIHV0aWxzXzEucGljaykoYXJncywgYXBpX2VuZHBvaW50c18xLm9hdXRoVG9rZW4uYm9keVBhcmFtcyksXG4gICAgICAgICAgICAgICAgICAgIGF1dGg6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsaWVudF9pZDogYXJncy5jbGllbnRfaWQsXG4gICAgICAgICAgICAgICAgICAgICAgICBjbGllbnRfc2VjcmV0OiBhcmdzLmNsaWVudF9zZWNyZXQsXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICB9O1xuICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0KHRoaXMsIF9DbGllbnRfYXV0aCwgb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLmF1dGgsIFwiZlwiKTtcbiAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZFNldCh0aGlzLCBfQ2xpZW50X2xvZ0xldmVsLCAoX2EgPSBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMubG9nTGV2ZWwpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IGxvZ2dpbmdfMS5Mb2dMZXZlbC5XQVJOLCBcImZcIik7XG4gICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRTZXQodGhpcywgX0NsaWVudF9sb2dnZXIsIChfYiA9IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5sb2dnZXIpICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6ICgwLCBsb2dnaW5nXzEubWFrZUNvbnNvbGVMb2dnZXIpKHBhY2thZ2VfanNvbl8xLm5hbWUpLCBcImZcIik7XG4gICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRTZXQodGhpcywgX0NsaWVudF9wcmVmaXhVcmwsICgoX2MgPSBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuYmFzZVVybCkgIT09IG51bGwgJiYgX2MgIT09IHZvaWQgMCA/IF9jIDogXCJodHRwczovL2FwaS5ub3Rpb24uY29tXCIpICsgXCIvdjEvXCIsIFwiZlwiKTtcbiAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZFNldCh0aGlzLCBfQ2xpZW50X3RpbWVvdXRNcywgKF9kID0gb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLnRpbWVvdXRNcykgIT09IG51bGwgJiYgX2QgIT09IHZvaWQgMCA/IF9kIDogNjAwMDAsIFwiZlwiKTtcbiAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZFNldCh0aGlzLCBfQ2xpZW50X25vdGlvblZlcnNpb24sIChfZSA9IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5ub3Rpb25WZXJzaW9uKSAhPT0gbnVsbCAmJiBfZSAhPT0gdm9pZCAwID8gX2UgOiBDbGllbnQuZGVmYXVsdE5vdGlvblZlcnNpb24sIFwiZlwiKTtcbiAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZFNldCh0aGlzLCBfQ2xpZW50X2ZldGNoLCAoX2YgPSBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuZmV0Y2gpICE9PSBudWxsICYmIF9mICE9PSB2b2lkIDAgPyBfZiA6IG5vZGVfZmV0Y2hfMS5kZWZhdWx0LCBcImZcIik7XG4gICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRTZXQodGhpcywgX0NsaWVudF9hZ2VudCwgb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLmFnZW50LCBcImZcIik7XG4gICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRTZXQodGhpcywgX0NsaWVudF91c2VyQWdlbnQsIGBub3Rpb25ocS1jbGllbnQvJHtwYWNrYWdlX2pzb25fMS52ZXJzaW9ufWAsIFwiZlwiKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2VuZHMgYSByZXF1ZXN0LlxuICAgICAqXG4gICAgICogQHBhcmFtIHBhdGhcbiAgICAgKiBAcGFyYW0gbWV0aG9kXG4gICAgICogQHBhcmFtIHF1ZXJ5XG4gICAgICogQHBhcmFtIGJvZHlcbiAgICAgKiBAcmV0dXJuc1xuICAgICAqL1xuICAgIGFzeW5jIHJlcXVlc3QoeyBwYXRoLCBtZXRob2QsIHF1ZXJ5LCBib2R5LCBhdXRoLCB9KSB7XG4gICAgICAgIHRoaXMubG9nKGxvZ2dpbmdfMS5Mb2dMZXZlbC5JTkZPLCBcInJlcXVlc3Qgc3RhcnRcIiwgeyBtZXRob2QsIHBhdGggfSk7XG4gICAgICAgIC8vIElmIHRoZSBib2R5IGlzIGVtcHR5LCBkb24ndCBzZW5kIHRoZSBib2R5IGluIHRoZSBIVFRQIHJlcXVlc3RcbiAgICAgICAgY29uc3QgYm9keUFzSnNvblN0cmluZyA9ICFib2R5IHx8IE9iamVjdC5lbnRyaWVzKGJvZHkpLmxlbmd0aCA9PT0gMFxuICAgICAgICAgICAgPyB1bmRlZmluZWRcbiAgICAgICAgICAgIDogSlNPTi5zdHJpbmdpZnkoYm9keSk7XG4gICAgICAgIGNvbnN0IHVybCA9IG5ldyBVUkwoYCR7X19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfQ2xpZW50X3ByZWZpeFVybCwgXCJmXCIpfSR7cGF0aH1gKTtcbiAgICAgICAgaWYgKHF1ZXJ5KSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyhxdWVyeSkpIHtcbiAgICAgICAgICAgICAgICBpZiAodmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlLmZvckVhY2godmFsID0+IHVybC5zZWFyY2hQYXJhbXMuYXBwZW5kKGtleSwgZGVjb2RlVVJJQ29tcG9uZW50KHZhbCkpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHVybC5zZWFyY2hQYXJhbXMuYXBwZW5kKGtleSwgU3RyaW5nKHZhbHVlKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gQWxsb3cgYm90aCBjbGllbnQgSUQgLyBjbGllbnQgc2VjcmV0IGJhc2VkIGF1dGggYXMgd2VsbCBhcyB0b2tlbiBiYXNlZCBhdXRoLlxuICAgICAgICBsZXQgYXV0aG9yaXphdGlvbkhlYWRlcjtcbiAgICAgICAgaWYgKHR5cGVvZiBhdXRoID09PSBcIm9iamVjdFwiKSB7XG4gICAgICAgICAgICAvLyBDbGllbnQgSUQgYW5kIHNlY3JldCBiYXNlZCBhdXRoIGlzICoqT05MWSoqIHN1cHBvcnRlZCB3aGVuIHVzaW5nIHRoZVxuICAgICAgICAgICAgLy8gYC9vYXV0aC90b2tlbmAgZW5kcG9pbnQuIElmIHRoaXMgaXMgdGhlIGNhc2UsIGhhbmRsZSBmb3JtYXR0aW5nIHRoZVxuICAgICAgICAgICAgLy8gYXV0aG9yaXphdGlvbiBoZWFkZXIgYXMgcmVxdWlyZWQgYnkgYEJhc2ljYCBhdXRoLlxuICAgICAgICAgICAgY29uc3QgdW5lbmNvZGVkQ3JlZGVudGlhbCA9IGAke2F1dGguY2xpZW50X2lkfToke2F1dGguY2xpZW50X3NlY3JldH1gO1xuICAgICAgICAgICAgY29uc3QgZW5jb2RlZENyZWRlbnRpYWwgPSBCdWZmZXIuZnJvbSh1bmVuY29kZWRDcmVkZW50aWFsKS50b1N0cmluZyhcImJhc2U2NFwiKTtcbiAgICAgICAgICAgIGF1dGhvcml6YXRpb25IZWFkZXIgPSB7IGF1dGhvcml6YXRpb246IGBCYXNpYyAke2VuY29kZWRDcmVkZW50aWFsfWAgfTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8vIE90aGVyd2lzZSBmb3JtYXQgYXV0aG9yaXphdGlvbiBoZWFkZXIgYXMgYEJlYXJlcmAgdG9rZW4gYXV0aC5cbiAgICAgICAgICAgIGF1dGhvcml6YXRpb25IZWFkZXIgPSB0aGlzLmF1dGhBc0hlYWRlcnMoYXV0aCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgaGVhZGVycyA9IHtcbiAgICAgICAgICAgIC4uLmF1dGhvcml6YXRpb25IZWFkZXIsXG4gICAgICAgICAgICBcIk5vdGlvbi1WZXJzaW9uXCI6IF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX0NsaWVudF9ub3Rpb25WZXJzaW9uLCBcImZcIiksXG4gICAgICAgICAgICBcInVzZXItYWdlbnRcIjogX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfQ2xpZW50X3VzZXJBZ2VudCwgXCJmXCIpLFxuICAgICAgICB9O1xuICAgICAgICBpZiAoYm9keUFzSnNvblN0cmluZyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBoZWFkZXJzW1wiY29udGVudC10eXBlXCJdID0gXCJhcHBsaWNhdGlvbi9qc29uXCI7XG4gICAgICAgIH1cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZXJyb3JzXzEuUmVxdWVzdFRpbWVvdXRFcnJvci5yZWplY3RBZnRlclRpbWVvdXQoX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfQ2xpZW50X2ZldGNoLCBcImZcIikuY2FsbCh0aGlzLCB1cmwudG9TdHJpbmcoKSwge1xuICAgICAgICAgICAgICAgIG1ldGhvZDogbWV0aG9kLnRvVXBwZXJDYXNlKCksXG4gICAgICAgICAgICAgICAgaGVhZGVycyxcbiAgICAgICAgICAgICAgICBib2R5OiBib2R5QXNKc29uU3RyaW5nLFxuICAgICAgICAgICAgICAgIGFnZW50OiBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9DbGllbnRfYWdlbnQsIFwiZlwiKSxcbiAgICAgICAgICAgIH0pLCBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9DbGllbnRfdGltZW91dE1zLCBcImZcIikpO1xuICAgICAgICAgICAgY29uc3QgcmVzcG9uc2VUZXh0ID0gYXdhaXQgcmVzcG9uc2UudGV4dCgpO1xuICAgICAgICAgICAgaWYgKCFyZXNwb25zZS5vaykge1xuICAgICAgICAgICAgICAgIHRocm93ICgwLCBlcnJvcnNfMS5idWlsZFJlcXVlc3RFcnJvcikocmVzcG9uc2UsIHJlc3BvbnNlVGV4dCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCByZXNwb25zZUpzb24gPSBKU09OLnBhcnNlKHJlc3BvbnNlVGV4dCk7XG4gICAgICAgICAgICB0aGlzLmxvZyhsb2dnaW5nXzEuTG9nTGV2ZWwuSU5GTywgYHJlcXVlc3Qgc3VjY2Vzc2AsIHsgbWV0aG9kLCBwYXRoIH0pO1xuICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlSnNvbjtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGlmICghKDAsIGVycm9yc18xLmlzTm90aW9uQ2xpZW50RXJyb3IpKGVycm9yKSkge1xuICAgICAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gTG9nIHRoZSBlcnJvciBpZiBpdCdzIG9uZSBvZiBvdXIga25vd24gZXJyb3IgdHlwZXNcbiAgICAgICAgICAgIHRoaXMubG9nKGxvZ2dpbmdfMS5Mb2dMZXZlbC5XQVJOLCBgcmVxdWVzdCBmYWlsYCwge1xuICAgICAgICAgICAgICAgIGNvZGU6IGVycm9yLmNvZGUsXG4gICAgICAgICAgICAgICAgbWVzc2FnZTogZXJyb3IubWVzc2FnZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaWYgKCgwLCBlcnJvcnNfMS5pc0hUVFBSZXNwb25zZUVycm9yKShlcnJvcikpIHtcbiAgICAgICAgICAgICAgICAvLyBUaGUgcmVzcG9uc2UgYm9keSBtYXkgY29udGFpbiBzZW5zaXRpdmUgaW5mb3JtYXRpb24gc28gaXQgaXMgbG9nZ2VkIHNlcGFyYXRlbHkgYXQgdGhlIERFQlVHIGxldmVsXG4gICAgICAgICAgICAgICAgdGhpcy5sb2cobG9nZ2luZ18xLkxvZ0xldmVsLkRFQlVHLCBgZmFpbGVkIHJlc3BvbnNlIGJvZHlgLCB7XG4gICAgICAgICAgICAgICAgICAgIGJvZHk6IGVycm9yLmJvZHksXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBFbWl0cyBhIGxvZyBtZXNzYWdlIHRvIHRoZSBjb25zb2xlLlxuICAgICAqXG4gICAgICogQHBhcmFtIGxldmVsIFRoZSBsZXZlbCBmb3IgdGhpcyBtZXNzYWdlXG4gICAgICogQHBhcmFtIGFyZ3MgQXJndW1lbnRzIHRvIHNlbmQgdG8gdGhlIGNvbnNvbGVcbiAgICAgKi9cbiAgICBsb2cobGV2ZWwsIG1lc3NhZ2UsIGV4dHJhSW5mbykge1xuICAgICAgICBpZiAoKDAsIGxvZ2dpbmdfMS5sb2dMZXZlbFNldmVyaXR5KShsZXZlbCkgPj0gKDAsIGxvZ2dpbmdfMS5sb2dMZXZlbFNldmVyaXR5KShfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9DbGllbnRfbG9nTGV2ZWwsIFwiZlwiKSkpIHtcbiAgICAgICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX0NsaWVudF9sb2dnZXIsIFwiZlwiKS5jYWxsKHRoaXMsIGxldmVsLCBtZXNzYWdlLCBleHRyYUluZm8pO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRyYW5zZm9ybXMgYW4gQVBJIGtleSBvciBhY2Nlc3MgdG9rZW4gaW50byBhIGhlYWRlcnMgb2JqZWN0IHN1aXRhYmxlIGZvciBhbiBIVFRQIHJlcXVlc3QuXG4gICAgICpcbiAgICAgKiBUaGlzIG1ldGhvZCB1c2VzIHRoZSBpbnN0YW5jZSdzIHZhbHVlIGFzIHRoZSBkZWZhdWx0IHdoZW4gdGhlIGlucHV0IGlzIHVuZGVmaW5lZC4gSWYgbmVpdGhlciBhcmUgZGVmaW5lZCwgaXQgcmV0dXJuc1xuICAgICAqIGFuIGVtcHR5IG9iamVjdFxuICAgICAqXG4gICAgICogQHBhcmFtIGF1dGggQVBJIGtleSBvciBhY2Nlc3MgdG9rZW5cbiAgICAgKiBAcmV0dXJucyBoZWFkZXJzIGtleS12YWx1ZSBvYmplY3RcbiAgICAgKi9cbiAgICBhdXRoQXNIZWFkZXJzKGF1dGgpIHtcbiAgICAgICAgY29uc3QgaGVhZGVycyA9IHt9O1xuICAgICAgICBjb25zdCBhdXRoSGVhZGVyVmFsdWUgPSBhdXRoICE9PSBudWxsICYmIGF1dGggIT09IHZvaWQgMCA/IGF1dGggOiBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9DbGllbnRfYXV0aCwgXCJmXCIpO1xuICAgICAgICBpZiAoYXV0aEhlYWRlclZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGhlYWRlcnNbXCJhdXRob3JpemF0aW9uXCJdID0gYEJlYXJlciAke2F1dGhIZWFkZXJWYWx1ZX1gO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBoZWFkZXJzO1xuICAgIH1cbn1cbmV4cG9ydHMuZGVmYXVsdCA9IENsaWVudDtcbl9DbGllbnRfYXV0aCA9IG5ldyBXZWFrTWFwKCksIF9DbGllbnRfbG9nTGV2ZWwgPSBuZXcgV2Vha01hcCgpLCBfQ2xpZW50X2xvZ2dlciA9IG5ldyBXZWFrTWFwKCksIF9DbGllbnRfcHJlZml4VXJsID0gbmV3IFdlYWtNYXAoKSwgX0NsaWVudF90aW1lb3V0TXMgPSBuZXcgV2Vha01hcCgpLCBfQ2xpZW50X25vdGlvblZlcnNpb24gPSBuZXcgV2Vha01hcCgpLCBfQ2xpZW50X2ZldGNoID0gbmV3IFdlYWtNYXAoKSwgX0NsaWVudF9hZ2VudCA9IG5ldyBXZWFrTWFwKCksIF9DbGllbnRfdXNlckFnZW50ID0gbmV3IFdlYWtNYXAoKTtcbkNsaWVudC5kZWZhdWx0Tm90aW9uVmVyc2lvbiA9IFwiMjAyMi0wNi0yOFwiO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Q2xpZW50LmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuLy8gY3NwZWxsOmRpc2FibGUtZmlsZVxuLy8gTm90ZTogVGhpcyBpcyBhIGdlbmVyYXRlZCBmaWxlLlxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5vYXV0aFRva2VuID0gZXhwb3J0cy5saXN0Q29tbWVudHMgPSBleHBvcnRzLmNyZWF0ZUNvbW1lbnQgPSBleHBvcnRzLnNlYXJjaCA9IGV4cG9ydHMuY3JlYXRlRGF0YWJhc2UgPSBleHBvcnRzLmxpc3REYXRhYmFzZXMgPSBleHBvcnRzLnF1ZXJ5RGF0YWJhc2UgPSBleHBvcnRzLnVwZGF0ZURhdGFiYXNlID0gZXhwb3J0cy5nZXREYXRhYmFzZSA9IGV4cG9ydHMuYXBwZW5kQmxvY2tDaGlsZHJlbiA9IGV4cG9ydHMubGlzdEJsb2NrQ2hpbGRyZW4gPSBleHBvcnRzLmRlbGV0ZUJsb2NrID0gZXhwb3J0cy51cGRhdGVCbG9jayA9IGV4cG9ydHMuZ2V0QmxvY2sgPSBleHBvcnRzLmdldFBhZ2VQcm9wZXJ0eSA9IGV4cG9ydHMudXBkYXRlUGFnZSA9IGV4cG9ydHMuZ2V0UGFnZSA9IGV4cG9ydHMuY3JlYXRlUGFnZSA9IGV4cG9ydHMubGlzdFVzZXJzID0gZXhwb3J0cy5nZXRVc2VyID0gZXhwb3J0cy5nZXRTZWxmID0gdm9pZCAwO1xuZXhwb3J0cy5nZXRTZWxmID0ge1xuICAgIG1ldGhvZDogXCJnZXRcIixcbiAgICBwYXRoUGFyYW1zOiBbXSxcbiAgICBxdWVyeVBhcmFtczogW10sXG4gICAgYm9keVBhcmFtczogW10sXG4gICAgcGF0aDogKCkgPT4gYHVzZXJzL21lYCxcbn07XG5leHBvcnRzLmdldFVzZXIgPSB7XG4gICAgbWV0aG9kOiBcImdldFwiLFxuICAgIHBhdGhQYXJhbXM6IFtcInVzZXJfaWRcIl0sXG4gICAgcXVlcnlQYXJhbXM6IFtdLFxuICAgIGJvZHlQYXJhbXM6IFtdLFxuICAgIHBhdGg6IChwKSA9PiBgdXNlcnMvJHtwLnVzZXJfaWR9YCxcbn07XG5leHBvcnRzLmxpc3RVc2VycyA9IHtcbiAgICBtZXRob2Q6IFwiZ2V0XCIsXG4gICAgcGF0aFBhcmFtczogW10sXG4gICAgcXVlcnlQYXJhbXM6IFtcInN0YXJ0X2N1cnNvclwiLCBcInBhZ2Vfc2l6ZVwiXSxcbiAgICBib2R5UGFyYW1zOiBbXSxcbiAgICBwYXRoOiAoKSA9PiBgdXNlcnNgLFxufTtcbmV4cG9ydHMuY3JlYXRlUGFnZSA9IHtcbiAgICBtZXRob2Q6IFwicG9zdFwiLFxuICAgIHBhdGhQYXJhbXM6IFtdLFxuICAgIHF1ZXJ5UGFyYW1zOiBbXSxcbiAgICBib2R5UGFyYW1zOiBbXCJwYXJlbnRcIiwgXCJwcm9wZXJ0aWVzXCIsIFwiaWNvblwiLCBcImNvdmVyXCIsIFwiY29udGVudFwiLCBcImNoaWxkcmVuXCJdLFxuICAgIHBhdGg6ICgpID0+IGBwYWdlc2AsXG59O1xuZXhwb3J0cy5nZXRQYWdlID0ge1xuICAgIG1ldGhvZDogXCJnZXRcIixcbiAgICBwYXRoUGFyYW1zOiBbXCJwYWdlX2lkXCJdLFxuICAgIHF1ZXJ5UGFyYW1zOiBbXCJmaWx0ZXJfcHJvcGVydGllc1wiXSxcbiAgICBib2R5UGFyYW1zOiBbXSxcbiAgICBwYXRoOiAocCkgPT4gYHBhZ2VzLyR7cC5wYWdlX2lkfWAsXG59O1xuZXhwb3J0cy51cGRhdGVQYWdlID0ge1xuICAgIG1ldGhvZDogXCJwYXRjaFwiLFxuICAgIHBhdGhQYXJhbXM6IFtcInBhZ2VfaWRcIl0sXG4gICAgcXVlcnlQYXJhbXM6IFtdLFxuICAgIGJvZHlQYXJhbXM6IFtcInByb3BlcnRpZXNcIiwgXCJpY29uXCIsIFwiY292ZXJcIiwgXCJhcmNoaXZlZFwiXSxcbiAgICBwYXRoOiAocCkgPT4gYHBhZ2VzLyR7cC5wYWdlX2lkfWAsXG59O1xuZXhwb3J0cy5nZXRQYWdlUHJvcGVydHkgPSB7XG4gICAgbWV0aG9kOiBcImdldFwiLFxuICAgIHBhdGhQYXJhbXM6IFtcInBhZ2VfaWRcIiwgXCJwcm9wZXJ0eV9pZFwiXSxcbiAgICBxdWVyeVBhcmFtczogW1wic3RhcnRfY3Vyc29yXCIsIFwicGFnZV9zaXplXCJdLFxuICAgIGJvZHlQYXJhbXM6IFtdLFxuICAgIHBhdGg6IChwKSA9PiBgcGFnZXMvJHtwLnBhZ2VfaWR9L3Byb3BlcnRpZXMvJHtwLnByb3BlcnR5X2lkfWAsXG59O1xuZXhwb3J0cy5nZXRCbG9jayA9IHtcbiAgICBtZXRob2Q6IFwiZ2V0XCIsXG4gICAgcGF0aFBhcmFtczogW1wiYmxvY2tfaWRcIl0sXG4gICAgcXVlcnlQYXJhbXM6IFtdLFxuICAgIGJvZHlQYXJhbXM6IFtdLFxuICAgIHBhdGg6IChwKSA9PiBgYmxvY2tzLyR7cC5ibG9ja19pZH1gLFxufTtcbmV4cG9ydHMudXBkYXRlQmxvY2sgPSB7XG4gICAgbWV0aG9kOiBcInBhdGNoXCIsXG4gICAgcGF0aFBhcmFtczogW1wiYmxvY2tfaWRcIl0sXG4gICAgcXVlcnlQYXJhbXM6IFtdLFxuICAgIGJvZHlQYXJhbXM6IFtcbiAgICAgICAgXCJlbWJlZFwiLFxuICAgICAgICBcInR5cGVcIixcbiAgICAgICAgXCJhcmNoaXZlZFwiLFxuICAgICAgICBcImJvb2ttYXJrXCIsXG4gICAgICAgIFwiaW1hZ2VcIixcbiAgICAgICAgXCJ2aWRlb1wiLFxuICAgICAgICBcInBkZlwiLFxuICAgICAgICBcImZpbGVcIixcbiAgICAgICAgXCJhdWRpb1wiLFxuICAgICAgICBcImNvZGVcIixcbiAgICAgICAgXCJlcXVhdGlvblwiLFxuICAgICAgICBcImRpdmlkZXJcIixcbiAgICAgICAgXCJicmVhZGNydW1iXCIsXG4gICAgICAgIFwidGFibGVfb2ZfY29udGVudHNcIixcbiAgICAgICAgXCJsaW5rX3RvX3BhZ2VcIixcbiAgICAgICAgXCJ0YWJsZV9yb3dcIixcbiAgICAgICAgXCJoZWFkaW5nXzFcIixcbiAgICAgICAgXCJoZWFkaW5nXzJcIixcbiAgICAgICAgXCJoZWFkaW5nXzNcIixcbiAgICAgICAgXCJwYXJhZ3JhcGhcIixcbiAgICAgICAgXCJidWxsZXRlZF9saXN0X2l0ZW1cIixcbiAgICAgICAgXCJudW1iZXJlZF9saXN0X2l0ZW1cIixcbiAgICAgICAgXCJxdW90ZVwiLFxuICAgICAgICBcInRvX2RvXCIsXG4gICAgICAgIFwidG9nZ2xlXCIsXG4gICAgICAgIFwidGVtcGxhdGVcIixcbiAgICAgICAgXCJjYWxsb3V0XCIsXG4gICAgICAgIFwic3luY2VkX2Jsb2NrXCIsXG4gICAgICAgIFwidGFibGVcIixcbiAgICBdLFxuICAgIHBhdGg6IChwKSA9PiBgYmxvY2tzLyR7cC5ibG9ja19pZH1gLFxufTtcbmV4cG9ydHMuZGVsZXRlQmxvY2sgPSB7XG4gICAgbWV0aG9kOiBcImRlbGV0ZVwiLFxuICAgIHBhdGhQYXJhbXM6IFtcImJsb2NrX2lkXCJdLFxuICAgIHF1ZXJ5UGFyYW1zOiBbXSxcbiAgICBib2R5UGFyYW1zOiBbXSxcbiAgICBwYXRoOiAocCkgPT4gYGJsb2Nrcy8ke3AuYmxvY2tfaWR9YCxcbn07XG5leHBvcnRzLmxpc3RCbG9ja0NoaWxkcmVuID0ge1xuICAgIG1ldGhvZDogXCJnZXRcIixcbiAgICBwYXRoUGFyYW1zOiBbXCJibG9ja19pZFwiXSxcbiAgICBxdWVyeVBhcmFtczogW1wic3RhcnRfY3Vyc29yXCIsIFwicGFnZV9zaXplXCJdLFxuICAgIGJvZHlQYXJhbXM6IFtdLFxuICAgIHBhdGg6IChwKSA9PiBgYmxvY2tzLyR7cC5ibG9ja19pZH0vY2hpbGRyZW5gLFxufTtcbmV4cG9ydHMuYXBwZW5kQmxvY2tDaGlsZHJlbiA9IHtcbiAgICBtZXRob2Q6IFwicGF0Y2hcIixcbiAgICBwYXRoUGFyYW1zOiBbXCJibG9ja19pZFwiXSxcbiAgICBxdWVyeVBhcmFtczogW10sXG4gICAgYm9keVBhcmFtczogW1wiY2hpbGRyZW5cIiwgXCJhZnRlclwiXSxcbiAgICBwYXRoOiAocCkgPT4gYGJsb2Nrcy8ke3AuYmxvY2tfaWR9L2NoaWxkcmVuYCxcbn07XG5leHBvcnRzLmdldERhdGFiYXNlID0ge1xuICAgIG1ldGhvZDogXCJnZXRcIixcbiAgICBwYXRoUGFyYW1zOiBbXCJkYXRhYmFzZV9pZFwiXSxcbiAgICBxdWVyeVBhcmFtczogW10sXG4gICAgYm9keVBhcmFtczogW10sXG4gICAgcGF0aDogKHApID0+IGBkYXRhYmFzZXMvJHtwLmRhdGFiYXNlX2lkfWAsXG59O1xuZXhwb3J0cy51cGRhdGVEYXRhYmFzZSA9IHtcbiAgICBtZXRob2Q6IFwicGF0Y2hcIixcbiAgICBwYXRoUGFyYW1zOiBbXCJkYXRhYmFzZV9pZFwiXSxcbiAgICBxdWVyeVBhcmFtczogW10sXG4gICAgYm9keVBhcmFtczogW1xuICAgICAgICBcInRpdGxlXCIsXG4gICAgICAgIFwiZGVzY3JpcHRpb25cIixcbiAgICAgICAgXCJpY29uXCIsXG4gICAgICAgIFwiY292ZXJcIixcbiAgICAgICAgXCJwcm9wZXJ0aWVzXCIsXG4gICAgICAgIFwiaXNfaW5saW5lXCIsXG4gICAgICAgIFwiYXJjaGl2ZWRcIixcbiAgICBdLFxuICAgIHBhdGg6IChwKSA9PiBgZGF0YWJhc2VzLyR7cC5kYXRhYmFzZV9pZH1gLFxufTtcbmV4cG9ydHMucXVlcnlEYXRhYmFzZSA9IHtcbiAgICBtZXRob2Q6IFwicG9zdFwiLFxuICAgIHBhdGhQYXJhbXM6IFtcImRhdGFiYXNlX2lkXCJdLFxuICAgIHF1ZXJ5UGFyYW1zOiBbXCJmaWx0ZXJfcHJvcGVydGllc1wiXSxcbiAgICBib2R5UGFyYW1zOiBbXCJzb3J0c1wiLCBcImZpbHRlclwiLCBcInN0YXJ0X2N1cnNvclwiLCBcInBhZ2Vfc2l6ZVwiLCBcImFyY2hpdmVkXCJdLFxuICAgIHBhdGg6IChwKSA9PiBgZGF0YWJhc2VzLyR7cC5kYXRhYmFzZV9pZH0vcXVlcnlgLFxufTtcbmV4cG9ydHMubGlzdERhdGFiYXNlcyA9IHtcbiAgICBtZXRob2Q6IFwiZ2V0XCIsXG4gICAgcGF0aFBhcmFtczogW10sXG4gICAgcXVlcnlQYXJhbXM6IFtcInN0YXJ0X2N1cnNvclwiLCBcInBhZ2Vfc2l6ZVwiXSxcbiAgICBib2R5UGFyYW1zOiBbXSxcbiAgICBwYXRoOiAoKSA9PiBgZGF0YWJhc2VzYCxcbn07XG5leHBvcnRzLmNyZWF0ZURhdGFiYXNlID0ge1xuICAgIG1ldGhvZDogXCJwb3N0XCIsXG4gICAgcGF0aFBhcmFtczogW10sXG4gICAgcXVlcnlQYXJhbXM6IFtdLFxuICAgIGJvZHlQYXJhbXM6IFtcbiAgICAgICAgXCJwYXJlbnRcIixcbiAgICAgICAgXCJwcm9wZXJ0aWVzXCIsXG4gICAgICAgIFwiaWNvblwiLFxuICAgICAgICBcImNvdmVyXCIsXG4gICAgICAgIFwidGl0bGVcIixcbiAgICAgICAgXCJkZXNjcmlwdGlvblwiLFxuICAgICAgICBcImlzX2lubGluZVwiLFxuICAgIF0sXG4gICAgcGF0aDogKCkgPT4gYGRhdGFiYXNlc2AsXG59O1xuZXhwb3J0cy5zZWFyY2ggPSB7XG4gICAgbWV0aG9kOiBcInBvc3RcIixcbiAgICBwYXRoUGFyYW1zOiBbXSxcbiAgICBxdWVyeVBhcmFtczogW10sXG4gICAgYm9keVBhcmFtczogW1wic29ydFwiLCBcInF1ZXJ5XCIsIFwic3RhcnRfY3Vyc29yXCIsIFwicGFnZV9zaXplXCIsIFwiZmlsdGVyXCJdLFxuICAgIHBhdGg6ICgpID0+IGBzZWFyY2hgLFxufTtcbmV4cG9ydHMuY3JlYXRlQ29tbWVudCA9IHtcbiAgICBtZXRob2Q6IFwicG9zdFwiLFxuICAgIHBhdGhQYXJhbXM6IFtdLFxuICAgIHF1ZXJ5UGFyYW1zOiBbXSxcbiAgICBib2R5UGFyYW1zOiBbXCJwYXJlbnRcIiwgXCJyaWNoX3RleHRcIiwgXCJkaXNjdXNzaW9uX2lkXCJdLFxuICAgIHBhdGg6ICgpID0+IGBjb21tZW50c2AsXG59O1xuZXhwb3J0cy5saXN0Q29tbWVudHMgPSB7XG4gICAgbWV0aG9kOiBcImdldFwiLFxuICAgIHBhdGhQYXJhbXM6IFtdLFxuICAgIHF1ZXJ5UGFyYW1zOiBbXCJibG9ja19pZFwiLCBcInN0YXJ0X2N1cnNvclwiLCBcInBhZ2Vfc2l6ZVwiXSxcbiAgICBib2R5UGFyYW1zOiBbXSxcbiAgICBwYXRoOiAoKSA9PiBgY29tbWVudHNgLFxufTtcbmV4cG9ydHMub2F1dGhUb2tlbiA9IHtcbiAgICBtZXRob2Q6IFwicG9zdFwiLFxuICAgIHBhdGhQYXJhbXM6IFtdLFxuICAgIHF1ZXJ5UGFyYW1zOiBbXSxcbiAgICBib2R5UGFyYW1zOiBbXCJncmFudF90eXBlXCIsIFwiY29kZVwiLCBcInJlZGlyZWN0X3VyaVwiLCBcImV4dGVybmFsX2FjY291bnRcIl0sXG4gICAgcGF0aDogKCkgPT4gYG9hdXRoL3Rva2VuYCxcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hcGktZW5kcG9pbnRzLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5idWlsZFJlcXVlc3RFcnJvciA9IGV4cG9ydHMuQVBJUmVzcG9uc2VFcnJvciA9IGV4cG9ydHMuVW5rbm93bkhUVFBSZXNwb25zZUVycm9yID0gZXhwb3J0cy5pc0hUVFBSZXNwb25zZUVycm9yID0gZXhwb3J0cy5SZXF1ZXN0VGltZW91dEVycm9yID0gZXhwb3J0cy5pc05vdGlvbkNsaWVudEVycm9yID0gZXhwb3J0cy5DbGllbnRFcnJvckNvZGUgPSBleHBvcnRzLkFQSUVycm9yQ29kZSA9IHZvaWQgMDtcbmNvbnN0IHV0aWxzXzEgPSByZXF1aXJlKFwiLi91dGlsc1wiKTtcbi8qKlxuICogRXJyb3IgY29kZXMgcmV0dXJuZWQgaW4gcmVzcG9uc2VzIGZyb20gdGhlIEFQSS5cbiAqL1xudmFyIEFQSUVycm9yQ29kZTtcbihmdW5jdGlvbiAoQVBJRXJyb3JDb2RlKSB7XG4gICAgQVBJRXJyb3JDb2RlW1wiVW5hdXRob3JpemVkXCJdID0gXCJ1bmF1dGhvcml6ZWRcIjtcbiAgICBBUElFcnJvckNvZGVbXCJSZXN0cmljdGVkUmVzb3VyY2VcIl0gPSBcInJlc3RyaWN0ZWRfcmVzb3VyY2VcIjtcbiAgICBBUElFcnJvckNvZGVbXCJPYmplY3ROb3RGb3VuZFwiXSA9IFwib2JqZWN0X25vdF9mb3VuZFwiO1xuICAgIEFQSUVycm9yQ29kZVtcIlJhdGVMaW1pdGVkXCJdID0gXCJyYXRlX2xpbWl0ZWRcIjtcbiAgICBBUElFcnJvckNvZGVbXCJJbnZhbGlkSlNPTlwiXSA9IFwiaW52YWxpZF9qc29uXCI7XG4gICAgQVBJRXJyb3JDb2RlW1wiSW52YWxpZFJlcXVlc3RVUkxcIl0gPSBcImludmFsaWRfcmVxdWVzdF91cmxcIjtcbiAgICBBUElFcnJvckNvZGVbXCJJbnZhbGlkUmVxdWVzdFwiXSA9IFwiaW52YWxpZF9yZXF1ZXN0XCI7XG4gICAgQVBJRXJyb3JDb2RlW1wiVmFsaWRhdGlvbkVycm9yXCJdID0gXCJ2YWxpZGF0aW9uX2Vycm9yXCI7XG4gICAgQVBJRXJyb3JDb2RlW1wiQ29uZmxpY3RFcnJvclwiXSA9IFwiY29uZmxpY3RfZXJyb3JcIjtcbiAgICBBUElFcnJvckNvZGVbXCJJbnRlcm5hbFNlcnZlckVycm9yXCJdID0gXCJpbnRlcm5hbF9zZXJ2ZXJfZXJyb3JcIjtcbiAgICBBUElFcnJvckNvZGVbXCJTZXJ2aWNlVW5hdmFpbGFibGVcIl0gPSBcInNlcnZpY2VfdW5hdmFpbGFibGVcIjtcbn0pKEFQSUVycm9yQ29kZSA9IGV4cG9ydHMuQVBJRXJyb3JDb2RlIHx8IChleHBvcnRzLkFQSUVycm9yQ29kZSA9IHt9KSk7XG4vKipcbiAqIEVycm9yIGNvZGVzIGdlbmVyYXRlZCBmb3IgY2xpZW50IGVycm9ycy5cbiAqL1xudmFyIENsaWVudEVycm9yQ29kZTtcbihmdW5jdGlvbiAoQ2xpZW50RXJyb3JDb2RlKSB7XG4gICAgQ2xpZW50RXJyb3JDb2RlW1wiUmVxdWVzdFRpbWVvdXRcIl0gPSBcIm5vdGlvbmhxX2NsaWVudF9yZXF1ZXN0X3RpbWVvdXRcIjtcbiAgICBDbGllbnRFcnJvckNvZGVbXCJSZXNwb25zZUVycm9yXCJdID0gXCJub3Rpb25ocV9jbGllbnRfcmVzcG9uc2VfZXJyb3JcIjtcbn0pKENsaWVudEVycm9yQ29kZSA9IGV4cG9ydHMuQ2xpZW50RXJyb3JDb2RlIHx8IChleHBvcnRzLkNsaWVudEVycm9yQ29kZSA9IHt9KSk7XG4vKipcbiAqIEJhc2UgZXJyb3IgdHlwZS5cbiAqL1xuY2xhc3MgTm90aW9uQ2xpZW50RXJyb3JCYXNlIGV4dGVuZHMgRXJyb3Ige1xufVxuLyoqXG4gKiBAcGFyYW0gZXJyb3IgYW55IHZhbHVlLCB1c3VhbGx5IGEgY2F1Z2h0IGVycm9yLlxuICogQHJldHVybnMgYHRydWVgIGlmIGVycm9yIGlzIGEgYE5vdGlvbkNsaWVudEVycm9yYC5cbiAqL1xuZnVuY3Rpb24gaXNOb3Rpb25DbGllbnRFcnJvcihlcnJvcikge1xuICAgIHJldHVybiAoMCwgdXRpbHNfMS5pc09iamVjdCkoZXJyb3IpICYmIGVycm9yIGluc3RhbmNlb2YgTm90aW9uQ2xpZW50RXJyb3JCYXNlO1xufVxuZXhwb3J0cy5pc05vdGlvbkNsaWVudEVycm9yID0gaXNOb3Rpb25DbGllbnRFcnJvcjtcbi8qKlxuICogTmFycm93cyBkb3duIHRoZSB0eXBlcyBvZiBhIE5vdGlvbkNsaWVudEVycm9yLlxuICogQHBhcmFtIGVycm9yIGFueSB2YWx1ZSwgdXN1YWxseSBhIGNhdWdodCBlcnJvci5cbiAqIEBwYXJhbSBjb2RlcyBhbiBvYmplY3QgbWFwcGluZyBmcm9tIHBvc3NpYmxlIGVycm9yIGNvZGVzIHRvIGB0cnVlYFxuICogQHJldHVybnMgYHRydWVgIGlmIGVycm9yIGlzIGEgYE5vdGlvbkNsaWVudEVycm9yYCB3aXRoIGEgY29kZSBpbiBgY29kZXNgLlxuICovXG5mdW5jdGlvbiBpc05vdGlvbkNsaWVudEVycm9yV2l0aENvZGUoZXJyb3IsIGNvZGVzKSB7XG4gICAgcmV0dXJuIGlzTm90aW9uQ2xpZW50RXJyb3IoZXJyb3IpICYmIGVycm9yLmNvZGUgaW4gY29kZXM7XG59XG4vKipcbiAqIEVycm9yIHRocm93biBieSB0aGUgY2xpZW50IGlmIGEgcmVxdWVzdCB0aW1lcyBvdXQuXG4gKi9cbmNsYXNzIFJlcXVlc3RUaW1lb3V0RXJyb3IgZXh0ZW5kcyBOb3Rpb25DbGllbnRFcnJvckJhc2Uge1xuICAgIGNvbnN0cnVjdG9yKG1lc3NhZ2UgPSBcIlJlcXVlc3QgdG8gTm90aW9uIEFQSSBoYXMgdGltZWQgb3V0XCIpIHtcbiAgICAgICAgc3VwZXIobWVzc2FnZSk7XG4gICAgICAgIHRoaXMuY29kZSA9IENsaWVudEVycm9yQ29kZS5SZXF1ZXN0VGltZW91dDtcbiAgICAgICAgdGhpcy5uYW1lID0gXCJSZXF1ZXN0VGltZW91dEVycm9yXCI7XG4gICAgfVxuICAgIHN0YXRpYyBpc1JlcXVlc3RUaW1lb3V0RXJyb3IoZXJyb3IpIHtcbiAgICAgICAgcmV0dXJuIGlzTm90aW9uQ2xpZW50RXJyb3JXaXRoQ29kZShlcnJvciwge1xuICAgICAgICAgICAgW0NsaWVudEVycm9yQ29kZS5SZXF1ZXN0VGltZW91dF06IHRydWUsXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBzdGF0aWMgcmVqZWN0QWZ0ZXJUaW1lb3V0KHByb21pc2UsIHRpbWVvdXRNUykge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgdGltZW91dElkID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgcmVqZWN0KG5ldyBSZXF1ZXN0VGltZW91dEVycm9yKCkpO1xuICAgICAgICAgICAgfSwgdGltZW91dE1TKTtcbiAgICAgICAgICAgIHByb21pc2VcbiAgICAgICAgICAgICAgICAudGhlbihyZXNvbHZlKVxuICAgICAgICAgICAgICAgIC5jYXRjaChyZWplY3QpXG4gICAgICAgICAgICAgICAgLnRoZW4oKCkgPT4gY2xlYXJUaW1lb3V0KHRpbWVvdXRJZCkpO1xuICAgICAgICB9KTtcbiAgICB9XG59XG5leHBvcnRzLlJlcXVlc3RUaW1lb3V0RXJyb3IgPSBSZXF1ZXN0VGltZW91dEVycm9yO1xuY2xhc3MgSFRUUFJlc3BvbnNlRXJyb3IgZXh0ZW5kcyBOb3Rpb25DbGllbnRFcnJvckJhc2Uge1xuICAgIGNvbnN0cnVjdG9yKGFyZ3MpIHtcbiAgICAgICAgc3VwZXIoYXJncy5tZXNzYWdlKTtcbiAgICAgICAgdGhpcy5uYW1lID0gXCJIVFRQUmVzcG9uc2VFcnJvclwiO1xuICAgICAgICBjb25zdCB7IGNvZGUsIHN0YXR1cywgaGVhZGVycywgcmF3Qm9keVRleHQgfSA9IGFyZ3M7XG4gICAgICAgIHRoaXMuY29kZSA9IGNvZGU7XG4gICAgICAgIHRoaXMuc3RhdHVzID0gc3RhdHVzO1xuICAgICAgICB0aGlzLmhlYWRlcnMgPSBoZWFkZXJzO1xuICAgICAgICB0aGlzLmJvZHkgPSByYXdCb2R5VGV4dDtcbiAgICB9XG59XG5jb25zdCBodHRwUmVzcG9uc2VFcnJvckNvZGVzID0ge1xuICAgIFtDbGllbnRFcnJvckNvZGUuUmVzcG9uc2VFcnJvcl06IHRydWUsXG4gICAgW0FQSUVycm9yQ29kZS5VbmF1dGhvcml6ZWRdOiB0cnVlLFxuICAgIFtBUElFcnJvckNvZGUuUmVzdHJpY3RlZFJlc291cmNlXTogdHJ1ZSxcbiAgICBbQVBJRXJyb3JDb2RlLk9iamVjdE5vdEZvdW5kXTogdHJ1ZSxcbiAgICBbQVBJRXJyb3JDb2RlLlJhdGVMaW1pdGVkXTogdHJ1ZSxcbiAgICBbQVBJRXJyb3JDb2RlLkludmFsaWRKU09OXTogdHJ1ZSxcbiAgICBbQVBJRXJyb3JDb2RlLkludmFsaWRSZXF1ZXN0VVJMXTogdHJ1ZSxcbiAgICBbQVBJRXJyb3JDb2RlLkludmFsaWRSZXF1ZXN0XTogdHJ1ZSxcbiAgICBbQVBJRXJyb3JDb2RlLlZhbGlkYXRpb25FcnJvcl06IHRydWUsXG4gICAgW0FQSUVycm9yQ29kZS5Db25mbGljdEVycm9yXTogdHJ1ZSxcbiAgICBbQVBJRXJyb3JDb2RlLkludGVybmFsU2VydmVyRXJyb3JdOiB0cnVlLFxuICAgIFtBUElFcnJvckNvZGUuU2VydmljZVVuYXZhaWxhYmxlXTogdHJ1ZSxcbn07XG5mdW5jdGlvbiBpc0hUVFBSZXNwb25zZUVycm9yKGVycm9yKSB7XG4gICAgaWYgKCFpc05vdGlvbkNsaWVudEVycm9yV2l0aENvZGUoZXJyb3IsIGh0dHBSZXNwb25zZUVycm9yQ29kZXMpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG59XG5leHBvcnRzLmlzSFRUUFJlc3BvbnNlRXJyb3IgPSBpc0hUVFBSZXNwb25zZUVycm9yO1xuLyoqXG4gKiBFcnJvciB0aHJvd24gaWYgYW4gQVBJIGNhbGwgcmVzcG9uZHMgd2l0aCBhbiB1bmtub3duIGVycm9yIGNvZGUsIG9yIGRvZXMgbm90IHJlc3BvbmQgd2l0aFxuICogYSBwcm9wZXJ0eS1mb3JtYXR0ZWQgZXJyb3IuXG4gKi9cbmNsYXNzIFVua25vd25IVFRQUmVzcG9uc2VFcnJvciBleHRlbmRzIEhUVFBSZXNwb25zZUVycm9yIHtcbiAgICBjb25zdHJ1Y3RvcihhcmdzKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgc3VwZXIoe1xuICAgICAgICAgICAgLi4uYXJncyxcbiAgICAgICAgICAgIGNvZGU6IENsaWVudEVycm9yQ29kZS5SZXNwb25zZUVycm9yLFxuICAgICAgICAgICAgbWVzc2FnZTogKF9hID0gYXJncy5tZXNzYWdlKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBgUmVxdWVzdCB0byBOb3Rpb24gQVBJIGZhaWxlZCB3aXRoIHN0YXR1czogJHthcmdzLnN0YXR1c31gLFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5uYW1lID0gXCJVbmtub3duSFRUUFJlc3BvbnNlRXJyb3JcIjtcbiAgICB9XG4gICAgc3RhdGljIGlzVW5rbm93bkhUVFBSZXNwb25zZUVycm9yKGVycm9yKSB7XG4gICAgICAgIHJldHVybiBpc05vdGlvbkNsaWVudEVycm9yV2l0aENvZGUoZXJyb3IsIHtcbiAgICAgICAgICAgIFtDbGllbnRFcnJvckNvZGUuUmVzcG9uc2VFcnJvcl06IHRydWUsXG4gICAgICAgIH0pO1xuICAgIH1cbn1cbmV4cG9ydHMuVW5rbm93bkhUVFBSZXNwb25zZUVycm9yID0gVW5rbm93bkhUVFBSZXNwb25zZUVycm9yO1xuY29uc3QgYXBpRXJyb3JDb2RlcyA9IHtcbiAgICBbQVBJRXJyb3JDb2RlLlVuYXV0aG9yaXplZF06IHRydWUsXG4gICAgW0FQSUVycm9yQ29kZS5SZXN0cmljdGVkUmVzb3VyY2VdOiB0cnVlLFxuICAgIFtBUElFcnJvckNvZGUuT2JqZWN0Tm90Rm91bmRdOiB0cnVlLFxuICAgIFtBUElFcnJvckNvZGUuUmF0ZUxpbWl0ZWRdOiB0cnVlLFxuICAgIFtBUElFcnJvckNvZGUuSW52YWxpZEpTT05dOiB0cnVlLFxuICAgIFtBUElFcnJvckNvZGUuSW52YWxpZFJlcXVlc3RVUkxdOiB0cnVlLFxuICAgIFtBUElFcnJvckNvZGUuSW52YWxpZFJlcXVlc3RdOiB0cnVlLFxuICAgIFtBUElFcnJvckNvZGUuVmFsaWRhdGlvbkVycm9yXTogdHJ1ZSxcbiAgICBbQVBJRXJyb3JDb2RlLkNvbmZsaWN0RXJyb3JdOiB0cnVlLFxuICAgIFtBUElFcnJvckNvZGUuSW50ZXJuYWxTZXJ2ZXJFcnJvcl06IHRydWUsXG4gICAgW0FQSUVycm9yQ29kZS5TZXJ2aWNlVW5hdmFpbGFibGVdOiB0cnVlLFxufTtcbi8qKlxuICogQSByZXNwb25zZSBmcm9tIHRoZSBBUEkgaW5kaWNhdGluZyBhIHByb2JsZW0uXG4gKiBVc2UgdGhlIGBjb2RlYCBwcm9wZXJ0eSB0byBoYW5kbGUgdmFyaW91cyBraW5kcyBvZiBlcnJvcnMuIEFsbCBpdHMgcG9zc2libGUgdmFsdWVzIGFyZSBpbiBgQVBJRXJyb3JDb2RlYC5cbiAqL1xuY2xhc3MgQVBJUmVzcG9uc2VFcnJvciBleHRlbmRzIEhUVFBSZXNwb25zZUVycm9yIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgdGhpcy5uYW1lID0gXCJBUElSZXNwb25zZUVycm9yXCI7XG4gICAgfVxuICAgIHN0YXRpYyBpc0FQSVJlc3BvbnNlRXJyb3IoZXJyb3IpIHtcbiAgICAgICAgcmV0dXJuIGlzTm90aW9uQ2xpZW50RXJyb3JXaXRoQ29kZShlcnJvciwgYXBpRXJyb3JDb2Rlcyk7XG4gICAgfVxufVxuZXhwb3J0cy5BUElSZXNwb25zZUVycm9yID0gQVBJUmVzcG9uc2VFcnJvcjtcbmZ1bmN0aW9uIGJ1aWxkUmVxdWVzdEVycm9yKHJlc3BvbnNlLCBib2R5VGV4dCkge1xuICAgIGNvbnN0IGFwaUVycm9yUmVzcG9uc2VCb2R5ID0gcGFyc2VBUElFcnJvclJlc3BvbnNlQm9keShib2R5VGV4dCk7XG4gICAgaWYgKGFwaUVycm9yUmVzcG9uc2VCb2R5ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBBUElSZXNwb25zZUVycm9yKHtcbiAgICAgICAgICAgIGNvZGU6IGFwaUVycm9yUmVzcG9uc2VCb2R5LmNvZGUsXG4gICAgICAgICAgICBtZXNzYWdlOiBhcGlFcnJvclJlc3BvbnNlQm9keS5tZXNzYWdlLFxuICAgICAgICAgICAgaGVhZGVyczogcmVzcG9uc2UuaGVhZGVycyxcbiAgICAgICAgICAgIHN0YXR1czogcmVzcG9uc2Uuc3RhdHVzLFxuICAgICAgICAgICAgcmF3Qm9keVRleHQ6IGJvZHlUZXh0LFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBVbmtub3duSFRUUFJlc3BvbnNlRXJyb3Ioe1xuICAgICAgICBtZXNzYWdlOiB1bmRlZmluZWQsXG4gICAgICAgIGhlYWRlcnM6IHJlc3BvbnNlLmhlYWRlcnMsXG4gICAgICAgIHN0YXR1czogcmVzcG9uc2Uuc3RhdHVzLFxuICAgICAgICByYXdCb2R5VGV4dDogYm9keVRleHQsXG4gICAgfSk7XG59XG5leHBvcnRzLmJ1aWxkUmVxdWVzdEVycm9yID0gYnVpbGRSZXF1ZXN0RXJyb3I7XG5mdW5jdGlvbiBwYXJzZUFQSUVycm9yUmVzcG9uc2VCb2R5KGJvZHkpIHtcbiAgICBpZiAodHlwZW9mIGJvZHkgIT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBsZXQgcGFyc2VkO1xuICAgIHRyeSB7XG4gICAgICAgIHBhcnNlZCA9IEpTT04ucGFyc2UoYm9keSk7XG4gICAgfVxuICAgIGNhdGNoIChwYXJzZUVycm9yKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKCEoMCwgdXRpbHNfMS5pc09iamVjdCkocGFyc2VkKSB8fFxuICAgICAgICB0eXBlb2YgcGFyc2VkW1wibWVzc2FnZVwiXSAhPT0gXCJzdHJpbmdcIiB8fFxuICAgICAgICAhaXNBUElFcnJvckNvZGUocGFyc2VkW1wiY29kZVwiXSkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICAuLi5wYXJzZWQsXG4gICAgICAgIGNvZGU6IHBhcnNlZFtcImNvZGVcIl0sXG4gICAgICAgIG1lc3NhZ2U6IHBhcnNlZFtcIm1lc3NhZ2VcIl0sXG4gICAgfTtcbn1cbmZ1bmN0aW9uIGlzQVBJRXJyb3JDb2RlKGNvZGUpIHtcbiAgICByZXR1cm4gdHlwZW9mIGNvZGUgPT09IFwic3RyaW5nXCIgJiYgY29kZSBpbiBhcGlFcnJvckNvZGVzO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZXJyb3JzLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5pc0Z1bGxDb21tZW50ID0gZXhwb3J0cy5pc0Z1bGxVc2VyID0gZXhwb3J0cy5pc0Z1bGxQYWdlT3JEYXRhYmFzZSA9IGV4cG9ydHMuaXNGdWxsRGF0YWJhc2UgPSBleHBvcnRzLmlzRnVsbFBhZ2UgPSBleHBvcnRzLmlzRnVsbEJsb2NrID0gZXhwb3J0cy5jb2xsZWN0UGFnaW5hdGVkQVBJID0gZXhwb3J0cy5pdGVyYXRlUGFnaW5hdGVkQVBJID0gdm9pZCAwO1xuLyoqXG4gKiBSZXR1cm5zIGFuIGFzeW5jIGl0ZXJhdG9yIG92ZXIgdGhlIHJlc3VsdHMgb2YgYW55IHBhZ2luYXRlZCBOb3Rpb24gQVBJLlxuICpcbiAqIEV4YW1wbGUgKGdpdmVuIGEgbm90aW9uIENsaWVudCBjYWxsZWQgYG5vdGlvbmApOlxuICpcbiAqIGBgYFxuICogZm9yIGF3YWl0IChjb25zdCBibG9jayBvZiBpdGVyYXRlUGFnaW5hdGVkQVBJKG5vdGlvbi5ibG9ja3MuY2hpbGRyZW4ubGlzdCwge1xuICogICBibG9ja19pZDogcGFyZW50QmxvY2tJZCxcbiAqIH0pKSB7XG4gKiAgIC8vIERvIHNvbWV0aGluZyB3aXRoIGJsb2NrLlxuICogfVxuICogYGBgXG4gKlxuICogQHBhcmFtIGxpc3RGbiBBIGJvdW5kIGZ1bmN0aW9uIG9uIHRoZSBOb3Rpb24gY2xpZW50IHRoYXQgcmVwcmVzZW50cyBhIGNvbmZvcm1pbmcgcGFnaW5hdGVkXG4gKiAgIEFQSS4gRXhhbXBsZTogYG5vdGlvbi5ibG9ja3MuY2hpbGRyZW4ubGlzdGAuXG4gKiBAcGFyYW0gZmlyc3RQYWdlQXJncyBBcmd1bWVudHMgdGhhdCBzaG91bGQgYmUgcGFzc2VkIHRvIHRoZSBBUEkgb24gdGhlIGZpcnN0IGFuZCBzdWJzZXF1ZW50XG4gKiAgIGNhbGxzIHRvIHRoZSBBUEkuIEFueSBuZWNlc3NhcnkgYG5leHRfY3Vyc29yYCB3aWxsIGJlIGF1dG9tYXRpY2FsbHkgcG9wdWxhdGVkIGJ5XG4gKiAgIHRoaXMgZnVuY3Rpb24uIEV4YW1wbGU6IGB7IGJsb2NrX2lkOiBcIjxteSBibG9jayBpZD5cIiB9YFxuICovXG5hc3luYyBmdW5jdGlvbiogaXRlcmF0ZVBhZ2luYXRlZEFQSShsaXN0Rm4sIGZpcnN0UGFnZUFyZ3MpIHtcbiAgICBsZXQgbmV4dEN1cnNvciA9IGZpcnN0UGFnZUFyZ3Muc3RhcnRfY3Vyc29yO1xuICAgIGRvIHtcbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBsaXN0Rm4oe1xuICAgICAgICAgICAgLi4uZmlyc3RQYWdlQXJncyxcbiAgICAgICAgICAgIHN0YXJ0X2N1cnNvcjogbmV4dEN1cnNvcixcbiAgICAgICAgfSk7XG4gICAgICAgIHlpZWxkKiByZXNwb25zZS5yZXN1bHRzO1xuICAgICAgICBuZXh0Q3Vyc29yID0gcmVzcG9uc2UubmV4dF9jdXJzb3I7XG4gICAgfSB3aGlsZSAobmV4dEN1cnNvcik7XG59XG5leHBvcnRzLml0ZXJhdGVQYWdpbmF0ZWRBUEkgPSBpdGVyYXRlUGFnaW5hdGVkQVBJO1xuLyoqXG4gKiBDb2xsZWN0IGFsbCBvZiB0aGUgcmVzdWx0cyBvZiBwYWdpbmF0aW5nIGFuIEFQSSBpbnRvIGFuIGluLW1lbW9yeSBhcnJheS5cbiAqXG4gKiBFeGFtcGxlIChnaXZlbiBhIG5vdGlvbiBDbGllbnQgY2FsbGVkIGBub3Rpb25gKTpcbiAqXG4gKiBgYGBcbiAqIGNvbnN0IGJsb2NrcyA9IGF3YWl0IGNvbGxlY3RQYWdpbmF0ZWRBUEkobm90aW9uLmJsb2Nrcy5jaGlsZHJlbi5saXN0LCB7XG4gKiAgIGJsb2NrX2lkOiBwYXJlbnRCbG9ja0lkLFxuICogfSlcbiAqIC8vIERvIHNvbWV0aGluZyB3aXRoIGJsb2Nrcy5cbiAqIGBgYFxuICpcbiAqIEBwYXJhbSBsaXN0Rm4gQSBib3VuZCBmdW5jdGlvbiBvbiB0aGUgTm90aW9uIGNsaWVudCB0aGF0IHJlcHJlc2VudHMgYSBjb25mb3JtaW5nIHBhZ2luYXRlZFxuICogICBBUEkuIEV4YW1wbGU6IGBub3Rpb24uYmxvY2tzLmNoaWxkcmVuLmxpc3RgLlxuICogQHBhcmFtIGZpcnN0UGFnZUFyZ3MgQXJndW1lbnRzIHRoYXQgc2hvdWxkIGJlIHBhc3NlZCB0byB0aGUgQVBJIG9uIHRoZSBmaXJzdCBhbmQgc3Vic2VxdWVudFxuICogICBjYWxscyB0byB0aGUgQVBJLiBBbnkgbmVjZXNzYXJ5IGBuZXh0X2N1cnNvcmAgd2lsbCBiZSBhdXRvbWF0aWNhbGx5IHBvcHVsYXRlZCBieVxuICogICB0aGlzIGZ1bmN0aW9uLiBFeGFtcGxlOiBgeyBibG9ja19pZDogXCI8bXkgYmxvY2sgaWQ+XCIgfWBcbiAqL1xuYXN5bmMgZnVuY3Rpb24gY29sbGVjdFBhZ2luYXRlZEFQSShsaXN0Rm4sIGZpcnN0UGFnZUFyZ3MpIHtcbiAgICBjb25zdCByZXN1bHRzID0gW107XG4gICAgZm9yIGF3YWl0IChjb25zdCBpdGVtIG9mIGl0ZXJhdGVQYWdpbmF0ZWRBUEkobGlzdEZuLCBmaXJzdFBhZ2VBcmdzKSkge1xuICAgICAgICByZXN1bHRzLnB1c2goaXRlbSk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHRzO1xufVxuZXhwb3J0cy5jb2xsZWN0UGFnaW5hdGVkQVBJID0gY29sbGVjdFBhZ2luYXRlZEFQSTtcbi8qKlxuICogQHJldHVybnMgYHRydWVgIGlmIGByZXNwb25zZWAgaXMgYSBmdWxsIGBCbG9ja09iamVjdFJlc3BvbnNlYC5cbiAqL1xuZnVuY3Rpb24gaXNGdWxsQmxvY2socmVzcG9uc2UpIHtcbiAgICByZXR1cm4gXCJ0eXBlXCIgaW4gcmVzcG9uc2U7XG59XG5leHBvcnRzLmlzRnVsbEJsb2NrID0gaXNGdWxsQmxvY2s7XG4vKipcbiAqIEByZXR1cm5zIGB0cnVlYCBpZiBgcmVzcG9uc2VgIGlzIGEgZnVsbCBgUGFnZU9iamVjdFJlc3BvbnNlYC5cbiAqL1xuZnVuY3Rpb24gaXNGdWxsUGFnZShyZXNwb25zZSkge1xuICAgIHJldHVybiBcInVybFwiIGluIHJlc3BvbnNlO1xufVxuZXhwb3J0cy5pc0Z1bGxQYWdlID0gaXNGdWxsUGFnZTtcbi8qKlxuICogQHJldHVybnMgYHRydWVgIGlmIGByZXNwb25zZWAgaXMgYSBmdWxsIGBEYXRhYmFzZU9iamVjdFJlc3BvbnNlYC5cbiAqL1xuZnVuY3Rpb24gaXNGdWxsRGF0YWJhc2UocmVzcG9uc2UpIHtcbiAgICByZXR1cm4gXCJ0aXRsZVwiIGluIHJlc3BvbnNlO1xufVxuZXhwb3J0cy5pc0Z1bGxEYXRhYmFzZSA9IGlzRnVsbERhdGFiYXNlO1xuLyoqXG4gKiBAcmV0dXJucyBgdHJ1ZWAgaWYgYHJlc3BvbnNlYCBpcyBhIGZ1bGwgYERhdGFiYXNlT2JqZWN0UmVzcG9uc2VgIG9yIGEgZnVsbFxuICogYFBhZ2VPYmplY3RSZXNwb25zZWAuXG4gKi9cbmZ1bmN0aW9uIGlzRnVsbFBhZ2VPckRhdGFiYXNlKHJlc3BvbnNlKSB7XG4gICAgaWYgKHJlc3BvbnNlLm9iamVjdCA9PT0gXCJkYXRhYmFzZVwiKSB7XG4gICAgICAgIHJldHVybiBpc0Z1bGxEYXRhYmFzZShyZXNwb25zZSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4gaXNGdWxsUGFnZShyZXNwb25zZSk7XG4gICAgfVxufVxuZXhwb3J0cy5pc0Z1bGxQYWdlT3JEYXRhYmFzZSA9IGlzRnVsbFBhZ2VPckRhdGFiYXNlO1xuLyoqXG4gKiBAcmV0dXJucyBgdHJ1ZWAgaWYgYHJlc3BvbnNlYCBpcyBhIGZ1bGwgYFVzZXJPYmplY3RSZXNwb25zZWAuXG4gKi9cbmZ1bmN0aW9uIGlzRnVsbFVzZXIocmVzcG9uc2UpIHtcbiAgICByZXR1cm4gXCJ0eXBlXCIgaW4gcmVzcG9uc2U7XG59XG5leHBvcnRzLmlzRnVsbFVzZXIgPSBpc0Z1bGxVc2VyO1xuLyoqXG4gKiBAcmV0dXJucyBgdHJ1ZWAgaWYgYHJlc3BvbnNlYCBpcyBhIGZ1bGwgYENvbW1lbnRPYmplY3RSZXNwb25zZWAuXG4gKi9cbmZ1bmN0aW9uIGlzRnVsbENvbW1lbnQocmVzcG9uc2UpIHtcbiAgICByZXR1cm4gXCJjcmVhdGVkX2J5XCIgaW4gcmVzcG9uc2U7XG59XG5leHBvcnRzLmlzRnVsbENvbW1lbnQgPSBpc0Z1bGxDb21tZW50O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aGVscGVycy5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuaXNGdWxsUGFnZU9yRGF0YWJhc2UgPSBleHBvcnRzLmlzRnVsbENvbW1lbnQgPSBleHBvcnRzLmlzRnVsbFVzZXIgPSBleHBvcnRzLmlzRnVsbFBhZ2UgPSBleHBvcnRzLmlzRnVsbERhdGFiYXNlID0gZXhwb3J0cy5pc0Z1bGxCbG9jayA9IGV4cG9ydHMuaXRlcmF0ZVBhZ2luYXRlZEFQSSA9IGV4cG9ydHMuY29sbGVjdFBhZ2luYXRlZEFQSSA9IGV4cG9ydHMuaXNOb3Rpb25DbGllbnRFcnJvciA9IGV4cG9ydHMuUmVxdWVzdFRpbWVvdXRFcnJvciA9IGV4cG9ydHMuVW5rbm93bkhUVFBSZXNwb25zZUVycm9yID0gZXhwb3J0cy5BUElSZXNwb25zZUVycm9yID0gZXhwb3J0cy5DbGllbnRFcnJvckNvZGUgPSBleHBvcnRzLkFQSUVycm9yQ29kZSA9IGV4cG9ydHMuTG9nTGV2ZWwgPSBleHBvcnRzLkNsaWVudCA9IHZvaWQgMDtcbnZhciBDbGllbnRfMSA9IHJlcXVpcmUoXCIuL0NsaWVudFwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkNsaWVudFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gQ2xpZW50XzEuZGVmYXVsdDsgfSB9KTtcbnZhciBsb2dnaW5nXzEgPSByZXF1aXJlKFwiLi9sb2dnaW5nXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiTG9nTGV2ZWxcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGxvZ2dpbmdfMS5Mb2dMZXZlbDsgfSB9KTtcbnZhciBlcnJvcnNfMSA9IHJlcXVpcmUoXCIuL2Vycm9yc1wiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkFQSUVycm9yQ29kZVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZXJyb3JzXzEuQVBJRXJyb3JDb2RlOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiQ2xpZW50RXJyb3JDb2RlXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBlcnJvcnNfMS5DbGllbnRFcnJvckNvZGU7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJBUElSZXNwb25zZUVycm9yXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBlcnJvcnNfMS5BUElSZXNwb25zZUVycm9yOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiVW5rbm93bkhUVFBSZXNwb25zZUVycm9yXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBlcnJvcnNfMS5Vbmtub3duSFRUUFJlc3BvbnNlRXJyb3I7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJSZXF1ZXN0VGltZW91dEVycm9yXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBlcnJvcnNfMS5SZXF1ZXN0VGltZW91dEVycm9yOyB9IH0pO1xuLy8gRXJyb3IgaGVscGVyc1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiaXNOb3Rpb25DbGllbnRFcnJvclwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZXJyb3JzXzEuaXNOb3Rpb25DbGllbnRFcnJvcjsgfSB9KTtcbnZhciBoZWxwZXJzXzEgPSByZXF1aXJlKFwiLi9oZWxwZXJzXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiY29sbGVjdFBhZ2luYXRlZEFQSVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gaGVscGVyc18xLmNvbGxlY3RQYWdpbmF0ZWRBUEk7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJpdGVyYXRlUGFnaW5hdGVkQVBJXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBoZWxwZXJzXzEuaXRlcmF0ZVBhZ2luYXRlZEFQSTsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImlzRnVsbEJsb2NrXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBoZWxwZXJzXzEuaXNGdWxsQmxvY2s7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJpc0Z1bGxEYXRhYmFzZVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gaGVscGVyc18xLmlzRnVsbERhdGFiYXNlOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiaXNGdWxsUGFnZVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gaGVscGVyc18xLmlzRnVsbFBhZ2U7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJpc0Z1bGxVc2VyXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBoZWxwZXJzXzEuaXNGdWxsVXNlcjsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImlzRnVsbENvbW1lbnRcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGhlbHBlcnNfMS5pc0Z1bGxDb21tZW50OyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiaXNGdWxsUGFnZU9yRGF0YWJhc2VcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGhlbHBlcnNfMS5pc0Z1bGxQYWdlT3JEYXRhYmFzZTsgfSB9KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5sb2dMZXZlbFNldmVyaXR5ID0gZXhwb3J0cy5tYWtlQ29uc29sZUxvZ2dlciA9IGV4cG9ydHMuTG9nTGV2ZWwgPSB2b2lkIDA7XG5jb25zdCB1dGlsc18xID0gcmVxdWlyZShcIi4vdXRpbHNcIik7XG52YXIgTG9nTGV2ZWw7XG4oZnVuY3Rpb24gKExvZ0xldmVsKSB7XG4gICAgTG9nTGV2ZWxbXCJERUJVR1wiXSA9IFwiZGVidWdcIjtcbiAgICBMb2dMZXZlbFtcIklORk9cIl0gPSBcImluZm9cIjtcbiAgICBMb2dMZXZlbFtcIldBUk5cIl0gPSBcIndhcm5cIjtcbiAgICBMb2dMZXZlbFtcIkVSUk9SXCJdID0gXCJlcnJvclwiO1xufSkoTG9nTGV2ZWwgPSBleHBvcnRzLkxvZ0xldmVsIHx8IChleHBvcnRzLkxvZ0xldmVsID0ge30pKTtcbmZ1bmN0aW9uIG1ha2VDb25zb2xlTG9nZ2VyKG5hbWUpIHtcbiAgICByZXR1cm4gKGxldmVsLCBtZXNzYWdlLCBleHRyYUluZm8pID0+IHtcbiAgICAgICAgY29uc29sZVtsZXZlbF0oYCR7bmFtZX0gJHtsZXZlbH06YCwgbWVzc2FnZSwgZXh0cmFJbmZvKTtcbiAgICB9O1xufVxuZXhwb3J0cy5tYWtlQ29uc29sZUxvZ2dlciA9IG1ha2VDb25zb2xlTG9nZ2VyO1xuLyoqXG4gKiBUcmFuc2Zvcm1zIGEgbG9nIGxldmVsIGludG8gYSBjb21wYXJhYmxlIChudW1lcmljYWwpIHZhbHVlIG9yZGVyZWQgYnkgc2V2ZXJpdHkuXG4gKi9cbmZ1bmN0aW9uIGxvZ0xldmVsU2V2ZXJpdHkobGV2ZWwpIHtcbiAgICBzd2l0Y2ggKGxldmVsKSB7XG4gICAgICAgIGNhc2UgTG9nTGV2ZWwuREVCVUc6XG4gICAgICAgICAgICByZXR1cm4gMjA7XG4gICAgICAgIGNhc2UgTG9nTGV2ZWwuSU5GTzpcbiAgICAgICAgICAgIHJldHVybiA0MDtcbiAgICAgICAgY2FzZSBMb2dMZXZlbC5XQVJOOlxuICAgICAgICAgICAgcmV0dXJuIDYwO1xuICAgICAgICBjYXNlIExvZ0xldmVsLkVSUk9SOlxuICAgICAgICAgICAgcmV0dXJuIDgwO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuICgwLCB1dGlsc18xLmFzc2VydE5ldmVyKShsZXZlbCk7XG4gICAgfVxufVxuZXhwb3J0cy5sb2dMZXZlbFNldmVyaXR5ID0gbG9nTGV2ZWxTZXZlcml0eTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWxvZ2dpbmcuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmlzT2JqZWN0ID0gZXhwb3J0cy5waWNrID0gZXhwb3J0cy5hc3NlcnROZXZlciA9IHZvaWQgMDtcbi8qKlxuICogVXRpbGl0eSBmb3IgZW5mb3JjaW5nIGV4aGF1c3RpdmVuZXNzIGNoZWNrcyBpbiB0aGUgdHlwZSBzeXN0ZW0uXG4gKlxuICogQHNlZSBodHRwczovL2Jhc2FyYXQuZ2l0Ym9vay5pby90eXBlc2NyaXB0L3R5cGUtc3lzdGVtL2Rpc2NyaW1pbmF0ZWQtdW5pb25zI3Rocm93LWluLWV4aGF1c3RpdmUtY2hlY2tzXG4gKlxuICogQHBhcmFtIHZhbHVlIFRoZSB2YXJpYWJsZSB3aXRoIG5vIHJlbWFpbmluZyB2YWx1ZXNcbiAqL1xuZnVuY3Rpb24gYXNzZXJ0TmV2ZXIodmFsdWUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYFVuZXhwZWN0ZWQgdmFsdWUgc2hvdWxkIG5ldmVyIG9jY3VyOiAke3ZhbHVlfWApO1xufVxuZXhwb3J0cy5hc3NlcnROZXZlciA9IGFzc2VydE5ldmVyO1xuZnVuY3Rpb24gcGljayhiYXNlLCBrZXlzKSB7XG4gICAgY29uc3QgZW50cmllcyA9IGtleXMubWFwKGtleSA9PiBba2V5LCBiYXNlID09PSBudWxsIHx8IGJhc2UgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGJhc2Vba2V5XV0pO1xuICAgIHJldHVybiBPYmplY3QuZnJvbUVudHJpZXMoZW50cmllcyk7XG59XG5leHBvcnRzLnBpY2sgPSBwaWNrO1xuZnVuY3Rpb24gaXNPYmplY3Qobykge1xuICAgIHJldHVybiB0eXBlb2YgbyA9PT0gXCJvYmplY3RcIiAmJiBvICE9PSBudWxsO1xufVxuZXhwb3J0cy5pc09iamVjdCA9IGlzT2JqZWN0O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXRpbHMuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8vIHJlZjogaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtZ2xvYmFsXG52YXIgZ2V0R2xvYmFsID0gZnVuY3Rpb24gKCkge1xuXHQvLyB0aGUgb25seSByZWxpYWJsZSBtZWFucyB0byBnZXQgdGhlIGdsb2JhbCBvYmplY3QgaXNcblx0Ly8gYEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKClgXG5cdC8vIEhvd2V2ZXIsIHRoaXMgY2F1c2VzIENTUCB2aW9sYXRpb25zIGluIENocm9tZSBhcHBzLlxuXHRpZiAodHlwZW9mIHNlbGYgIT09ICd1bmRlZmluZWQnKSB7IHJldHVybiBzZWxmOyB9XG5cdGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykgeyByZXR1cm4gd2luZG93OyB9XG5cdGlmICh0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJykgeyByZXR1cm4gZ2xvYmFsOyB9XG5cdHRocm93IG5ldyBFcnJvcigndW5hYmxlIHRvIGxvY2F0ZSBnbG9iYWwgb2JqZWN0Jyk7XG59XG5cbnZhciBnbG9iYWxPYmplY3QgPSBnZXRHbG9iYWwoKTtcblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzID0gZ2xvYmFsT2JqZWN0LmZldGNoO1xuXG4vLyBOZWVkZWQgZm9yIFR5cGVTY3JpcHQgYW5kIFdlYnBhY2suXG5pZiAoZ2xvYmFsT2JqZWN0LmZldGNoKSB7XG5cdGV4cG9ydHMuZGVmYXVsdCA9IGdsb2JhbE9iamVjdC5mZXRjaC5iaW5kKGdsb2JhbE9iamVjdCk7XG59XG5cbmV4cG9ydHMuSGVhZGVycyA9IGdsb2JhbE9iamVjdC5IZWFkZXJzO1xuZXhwb3J0cy5SZXF1ZXN0ID0gZ2xvYmFsT2JqZWN0LlJlcXVlc3Q7XG5leHBvcnRzLlJlc3BvbnNlID0gZ2xvYmFsT2JqZWN0LlJlc3BvbnNlO1xuIiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHQvLyBubyBtb2R1bGUuaWQgbmVlZGVkXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsIl9fd2VicGFja19yZXF1aXJlX18uZyA9IChmdW5jdGlvbigpIHtcblx0aWYgKHR5cGVvZiBnbG9iYWxUaGlzID09PSAnb2JqZWN0JykgcmV0dXJuIGdsb2JhbFRoaXM7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIHRoaXMgfHwgbmV3IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ29iamVjdCcpIHJldHVybiB3aW5kb3c7XG5cdH1cbn0pKCk7IiwiLy8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5yID0gKGV4cG9ydHMpID0+IHtcblx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cdH1cblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbn07IiwidmFyIF9fYXdhaXRlciA9ICh0aGlzICYmIHRoaXMuX19hd2FpdGVyKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XG4gICAgZnVuY3Rpb24gYWRvcHQodmFsdWUpIHsgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUCA/IHZhbHVlIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0pOyB9XG4gICAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogYWRvcHQocmVzdWx0LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9XG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcbiAgICB9KTtcbn07XG5pbXBvcnQgeyBDbGllbnQgfSBmcm9tICdAbm90aW9uaHEvY2xpZW50JztcbmZ1bmN0aW9uIGZvcm1hdGVEYXRlKCkge1xuICAgIGNvbnN0IGN1cnJlbnREYXRlID0gbmV3IERhdGUoKTtcbiAgICBjb25zdCB5ZWFyID0gY3VycmVudERhdGUuZ2V0RnVsbFllYXIoKTtcbiAgICBjb25zdCBtb250aCA9IFN0cmluZyhjdXJyZW50RGF0ZS5nZXRNb250aCgpICsgMSkucGFkU3RhcnQoMiwgJzAnKTtcbiAgICBjb25zdCBkYXkgPSBTdHJpbmcoY3VycmVudERhdGUuZ2V0RGF0ZSgpKS5wYWRTdGFydCgyLCAnMCcpO1xuICAgIGNvbnN0IGZvcm1hdHRlZERhdGUgPSBgJHt5ZWFyfS0ke21vbnRofS0ke2RheX1gO1xuICAgIHJldHVybiBmb3JtYXR0ZWREYXRlO1xufVxuZnVuY3Rpb24gc2F2ZTJub3Rpb24oKSB7XG4gICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFJldHJpZXZlIG5lY2Vzc2FyeSBkYXRhIGZyb20gc3RvcmFnZVxuICAgICAgICAgICAgY29uc3QgZGF0YWJhc2VJRERhdGEgPSB5aWVsZCBnZXRTdG9yYWdlRGF0YSgnZGF0YWJhc2VJRCcpO1xuICAgICAgICAgICAgY29uc3QgdG9rZW5EYXRhID0geWllbGQgZ2V0U3RvcmFnZURhdGEoJ25Ub2tlbicpO1xuICAgICAgICAgICAgY29uc3Qgc2VsZWN0ZWRSZXN1bHQgPSB5aWVsZCBnZXRTdG9yYWdlRGF0YSgnc2VsZWN0ZWRUZXh0Jyk7XG4gICAgICAgICAgICBsZXQgc2VsZWN0ZWRBcnIgPSBzZWxlY3RlZFJlc3VsdCA/IEpTT04ucGFyc2Uoc2VsZWN0ZWRSZXN1bHQuc2VsZWN0ZWRUZXh0KSA6IFtdO1xuICAgICAgICAgICAgLy8gSW5pdGlhbGl6ZSBOb3Rpb24gY2xpZW50XG4gICAgICAgICAgICBjb25zdCBub3Rpb24gPSBuZXcgQ2xpZW50KHsgYXV0aDogdG9rZW5EYXRhLm5Ub2tlbiB9KTtcbiAgICAgICAgICAgIC8vIENyZWF0ZSBhIHByb21pc2UgZm9yIGVhY2ggcGFnZSBjcmVhdGlvbiBvcGVyYXRpb25cbiAgICAgICAgICAgIGNvbnN0IGNyZWF0aW9uUHJvbWlzZXMgPSBzZWxlY3RlZEFyci5tYXAoKGl0ZW0pID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBwcm9wZXJ0aWVzID0ge1xuICAgICAgICAgICAgICAgICAgICBcImNvbnRleHRcIjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgXCJ0aXRsZVwiOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeyBcInRleHRcIjogeyBcImNvbnRlbnRcIjogaXRlbS50ZXh0IH0gfVxuICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBcInVybFwiOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBcInVybFwiOiBpdGVtLnVybFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBcImRhdGVcIjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgXCJkYXRlXCI6IHsgXCJzdGFydFwiOiBmb3JtYXRlRGF0ZSgpIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5vdGlvbi5wYWdlcy5jcmVhdGUoe1xuICAgICAgICAgICAgICAgICAgICBwYXJlbnQ6IHsgZGF0YWJhc2VfaWQ6IGRhdGFiYXNlSUREYXRhLmRhdGFiYXNlSUQgfSxcbiAgICAgICAgICAgICAgICAgICAgcHJvcGVydGllc1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAvLyBFeGVjdXRlIGFsbCBwcm9taXNlcyBjb25jdXJyZW50bHlcbiAgICAgICAgICAgIHlpZWxkIFByb21pc2UuYWxsKGNyZWF0aW9uUHJvbWlzZXMpO1xuICAgICAgICAgICAgLy8gVUkgZmVlZGJhY2tcbiAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwic2F2ZTJub3Rpb25cIikuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gXCIjY2VjZWNlXCI7XG4gICAgICAgICAgICBhbGVydChcIlNhdmVkIHRvIE5vdGlvbiBzdWNjZXNzZnVsbHkhXCIpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnJvcik7XG4gICAgICAgICAgICBhbGVydChcIkVycm9yIHNhdmluZyB0byBOb3Rpb25cIik7XG4gICAgICAgIH1cbiAgICB9KTtcbn1cbmZ1bmN0aW9uIGdldFN0b3JhZ2VEYXRhKGtleSkge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgIGNocm9tZS5zdG9yYWdlLmxvY2FsLmdldChrZXksIChyZXN1bHQpID0+IHtcbiAgICAgICAgICAgIGlmIChjaHJvbWUucnVudGltZS5sYXN0RXJyb3IpIHtcbiAgICAgICAgICAgICAgICByZWplY3QobmV3IEVycm9yKGNocm9tZS5ydW50aW1lLmxhc3RFcnJvci5tZXNzYWdlKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXNvbHZlKHJlc3VsdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH0pO1xufVxuY29uc3Qgc2F2ZTJub3Rpb25idG4gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInNhdmUybm90aW9uXCIpO1xuc2F2ZTJub3Rpb25idG4uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGZ1bmN0aW9uICgpIHtcbiAgICBzYXZlMm5vdGlvbigpO1xufSk7XG5jb25zdCBjbGVhckFsbEJ0biA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiY2xlYXJBbGxCdG5cIik7XG5jbGVhckFsbEJ0bi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZnVuY3Rpb24gKCkge1xuICAgIC8vIOWPquWIoOmZpCBzZWxlY3RlZFRleHRcbiAgICBjaHJvbWUuc3RvcmFnZS5sb2NhbC5yZW1vdmUoJ3NlbGVjdGVkVGV4dCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgY2hyb21lLnRhYnMucXVlcnkoeyBhY3RpdmU6IHRydWUsIGN1cnJlbnRXaW5kb3c6IHRydWUgfSwgZnVuY3Rpb24gKHRhYnMpIHtcbiAgICAgICAgICAgIGNocm9tZS50YWJzLnNlbmRNZXNzYWdlKHRhYnNbMF0uaWQsIHsgYWN0aW9uOiBcImNsZWFySGlnaGxpZ2h0c1wiIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgLy8g5riF6Zmk6aG16Z2i5LiK55qE5YiX6KGo5YaF5a65XG4gICAgICAgIGNvbnN0IGxpc3RFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2hpZ2hsaWdodC1saXN0Jyk7XG4gICAgICAgIGlmIChsaXN0RWxlbWVudCkge1xuICAgICAgICAgICAgbGlzdEVsZW1lbnQuaW5uZXJIVE1MID0gJyc7XG4gICAgICAgIH1cbiAgICB9KTtcbn0pO1xuLy/lnKhwb3B1cOS4reaYvuekuumrmOS6rueahOaWh+acrOWIl+ihqO+8jOW5tuWkhOeQhuWIoOmZpOS6i+S7tlxuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsIGZ1bmN0aW9uICgpIHtcbiAgICBjb25zdCBsaXN0RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdoaWdobGlnaHQtbGlzdCcpO1xuICAgIGNocm9tZS5zdG9yYWdlLmxvY2FsLmdldCgnc2VsZWN0ZWRUZXh0JywgZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgaWYgKGRhdGEuc2VsZWN0ZWRUZXh0KSB7XG4gICAgICAgICAgICBjb25zdCBsaXN0QXJyID0gSlNPTi5wYXJzZShkYXRhLnNlbGVjdGVkVGV4dCk7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcImRhdGEuc2VsZWN0ZWRUZXh0XCIgKyBkYXRhLnNlbGVjdGVkVGV4dCk7XG4gICAgICAgICAgICBsaXN0QXJyLmZvckVhY2goZnVuY3Rpb24gKGhpZ2hsaWdodCwgaW5kZXgpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBpdGVtRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICAgICAgICAgIGl0ZW1FbGVtZW50LmNsYXNzTGlzdC5hZGQoJ2hpZ2hsaWdodC1pdGVtJyk7XG4gICAgICAgICAgICAgICAgY29uc3QgdGV4dEVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7XG4gICAgICAgICAgICAgICAgdGV4dEVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnaGlnaGxpZ2h0LXRleHQnKTtcbiAgICAgICAgICAgICAgICB0ZXh0RWxlbWVudC50ZXh0Q29udGVudCA9IGhpZ2hsaWdodC50ZXh0LnN1YnN0cmluZygwLCAxNSkgKyAnLi4uJztcbiAgICAgICAgICAgICAgICBpdGVtRWxlbWVudC5hcHBlbmRDaGlsZCh0ZXh0RWxlbWVudCk7XG4gICAgICAgICAgICAgICAgY29uc3QgZGVsZXRlQnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7XG4gICAgICAgICAgICAgICAgZGVsZXRlQnV0dG9uLnRleHRDb250ZW50ID0gJ0RlbGV0ZSc7XG4gICAgICAgICAgICAgICAgZGVsZXRlQnV0dG9uLmNsYXNzTGlzdC5hZGQoJ2RlbGV0ZS1idXR0b24nKTtcbiAgICAgICAgICAgICAgICBkZWxldGVCdXR0b24ub25jbGljayA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8g5Y+R6YCB5raI5oGv5YiwIGNvbnRlbnQgc2NyaXB0IOadpeWIoOmZpOeJueWumklE55qE6auY5LquXG4gICAgICAgICAgICAgICAgICAgIGNocm9tZS50YWJzLnF1ZXJ5KHsgYWN0aXZlOiB0cnVlLCBjdXJyZW50V2luZG93OiB0cnVlIH0sIGZ1bmN0aW9uICh0YWJzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjaHJvbWUudGFicy5zZW5kTWVzc2FnZSh0YWJzWzBdLmlkLCB7IGFjdGlvbjogXCJkZWxldGVIaWdobGlnaHRcIiwgaGlnaGxpZ2h0SWQ6IGhpZ2hsaWdodC5pZCB9KTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIC8vIOS7juWtmOWCqOS4reWIoOmZpOeJueWumklE55qE6auY5LquXG4gICAgICAgICAgICAgICAgICAgIGxpc3RBcnIuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgICAgICAgICAgICAgY2hyb21lLnN0b3JhZ2UubG9jYWwuc2V0KHsgJ3NlbGVjdGVkVGV4dCc6IEpTT04uc3RyaW5naWZ5KGxpc3RBcnIpIH0pO1xuICAgICAgICAgICAgICAgICAgICAvLyDku45ET03kuK3liKDpmaRcbiAgICAgICAgICAgICAgICAgICAgaXRlbUVsZW1lbnQucmVtb3ZlKCk7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBpdGVtRWxlbWVudC5hcHBlbmRDaGlsZChkZWxldGVCdXR0b24pO1xuICAgICAgICAgICAgICAgIGxpc3RFbGVtZW50LmFwcGVuZENoaWxkKGl0ZW1FbGVtZW50KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfSk7XG59KTtcbiJdLCJuYW1lcyI6WyJfQ2xpZW50X2F1dGgiLCJfQ2xpZW50X2xvZ0xldmVsIiwiX0NsaWVudF9sb2dnZXIiLCJfQ2xpZW50X3ByZWZpeFVybCIsIl9DbGllbnRfdGltZW91dE1zIiwiX0NsaWVudF9ub3Rpb25WZXJzaW9uIiwiX0NsaWVudF9mZXRjaCIsIl9DbGllbnRfYWdlbnQiLCJfQ2xpZW50X3VzZXJBZ2VudCIsIl9fY2xhc3NQcml2YXRlRmllbGRTZXQiLCJ0aGlzIiwicmVjZWl2ZXIiLCJzdGF0ZSIsInZhbHVlIiwia2luZCIsImYiLCJUeXBlRXJyb3IiLCJoYXMiLCJjYWxsIiwic2V0IiwiX19jbGFzc1ByaXZhdGVGaWVsZEdldCIsImdldCIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsImxvZ2dpbmdfMSIsImVycm9yc18xIiwidXRpbHNfMSIsImFwaV9lbmRwb2ludHNfMSIsIm5vZGVfZmV0Y2hfMSIsInBhY2thZ2VfanNvbl8xIiwiQ2xpZW50IiwiY29uc3RydWN0b3IiLCJvcHRpb25zIiwiX2EiLCJfYiIsIl9jIiwiX2QiLCJfZSIsIl9mIiwiYmxvY2tzIiwicmV0cmlldmUiLCJhcmdzIiwicmVxdWVzdCIsInBhdGgiLCJnZXRCbG9jayIsIm1ldGhvZCIsInF1ZXJ5IiwicGljayIsInF1ZXJ5UGFyYW1zIiwiYm9keSIsImJvZHlQYXJhbXMiLCJhdXRoIiwidXBkYXRlIiwidXBkYXRlQmxvY2siLCJkZWxldGUiLCJkZWxldGVCbG9jayIsImNoaWxkcmVuIiwiYXBwZW5kIiwiYXBwZW5kQmxvY2tDaGlsZHJlbiIsImxpc3QiLCJsaXN0QmxvY2tDaGlsZHJlbiIsImRhdGFiYXNlcyIsImxpc3REYXRhYmFzZXMiLCJnZXREYXRhYmFzZSIsInF1ZXJ5RGF0YWJhc2UiLCJjcmVhdGUiLCJjcmVhdGVEYXRhYmFzZSIsInVwZGF0ZURhdGFiYXNlIiwicGFnZXMiLCJjcmVhdGVQYWdlIiwiZ2V0UGFnZSIsInVwZGF0ZVBhZ2UiLCJwcm9wZXJ0aWVzIiwiZ2V0UGFnZVByb3BlcnR5IiwidXNlcnMiLCJnZXRVc2VyIiwibGlzdFVzZXJzIiwibWUiLCJnZXRTZWxmIiwiY29tbWVudHMiLCJjcmVhdGVDb21tZW50IiwibGlzdENvbW1lbnRzIiwic2VhcmNoIiwib2F1dGgiLCJ0b2tlbiIsIm9hdXRoVG9rZW4iLCJjbGllbnRfaWQiLCJjbGllbnRfc2VjcmV0IiwibG9nTGV2ZWwiLCJMb2dMZXZlbCIsIldBUk4iLCJsb2dnZXIiLCJtYWtlQ29uc29sZUxvZ2dlciIsIm5hbWUiLCJiYXNlVXJsIiwidGltZW91dE1zIiwibm90aW9uVmVyc2lvbiIsImRlZmF1bHROb3Rpb25WZXJzaW9uIiwiZmV0Y2giLCJkZWZhdWx0IiwiYWdlbnQiLCJ2ZXJzaW9uIiwibG9nIiwiSU5GTyIsImJvZHlBc0pzb25TdHJpbmciLCJlbnRyaWVzIiwibGVuZ3RoIiwiSlNPTiIsInN0cmluZ2lmeSIsInVuZGVmaW5lZCIsInVybCIsIlVSTCIsImtleSIsIkFycmF5IiwiaXNBcnJheSIsImZvckVhY2giLCJ2YWwiLCJzZWFyY2hQYXJhbXMiLCJkZWNvZGVVUklDb21wb25lbnQiLCJTdHJpbmciLCJhdXRob3JpemF0aW9uSGVhZGVyIiwidW5lbmNvZGVkQ3JlZGVudGlhbCIsImF1dGhvcml6YXRpb24iLCJCdWZmZXIiLCJmcm9tIiwidG9TdHJpbmciLCJhdXRoQXNIZWFkZXJzIiwiaGVhZGVycyIsInJlc3BvbnNlIiwiUmVxdWVzdFRpbWVvdXRFcnJvciIsInJlamVjdEFmdGVyVGltZW91dCIsInRvVXBwZXJDYXNlIiwicmVzcG9uc2VUZXh0IiwidGV4dCIsIm9rIiwiYnVpbGRSZXF1ZXN0RXJyb3IiLCJyZXNwb25zZUpzb24iLCJwYXJzZSIsImVycm9yIiwiaXNOb3Rpb25DbGllbnRFcnJvciIsImNvZGUiLCJtZXNzYWdlIiwiaXNIVFRQUmVzcG9uc2VFcnJvciIsIkRFQlVHIiwibGV2ZWwiLCJleHRyYUluZm8iLCJsb2dMZXZlbFNldmVyaXR5IiwiYXV0aEhlYWRlclZhbHVlIiwiV2Vha01hcCIsInBhdGhQYXJhbXMiLCJwIiwidXNlcl9pZCIsInBhZ2VfaWQiLCJwcm9wZXJ0eV9pZCIsImJsb2NrX2lkIiwiZGF0YWJhc2VfaWQiLCJBUElSZXNwb25zZUVycm9yIiwiVW5rbm93bkhUVFBSZXNwb25zZUVycm9yIiwiQ2xpZW50RXJyb3JDb2RlIiwiQVBJRXJyb3JDb2RlIiwiTm90aW9uQ2xpZW50RXJyb3JCYXNlIiwiRXJyb3IiLCJpc09iamVjdCIsImlzTm90aW9uQ2xpZW50RXJyb3JXaXRoQ29kZSIsImNvZGVzIiwic3VwZXIiLCJSZXF1ZXN0VGltZW91dCIsImlzUmVxdWVzdFRpbWVvdXRFcnJvciIsInByb21pc2UiLCJ0aW1lb3V0TVMiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsInRpbWVvdXRJZCIsInNldFRpbWVvdXQiLCJ0aGVuIiwiY2F0Y2giLCJjbGVhclRpbWVvdXQiLCJIVFRQUmVzcG9uc2VFcnJvciIsInN0YXR1cyIsInJhd0JvZHlUZXh0IiwiaHR0cFJlc3BvbnNlRXJyb3JDb2RlcyIsIlJlc3BvbnNlRXJyb3IiLCJVbmF1dGhvcml6ZWQiLCJSZXN0cmljdGVkUmVzb3VyY2UiLCJPYmplY3ROb3RGb3VuZCIsIlJhdGVMaW1pdGVkIiwiSW52YWxpZEpTT04iLCJJbnZhbGlkUmVxdWVzdFVSTCIsIkludmFsaWRSZXF1ZXN0IiwiVmFsaWRhdGlvbkVycm9yIiwiQ29uZmxpY3RFcnJvciIsIkludGVybmFsU2VydmVyRXJyb3IiLCJTZXJ2aWNlVW5hdmFpbGFibGUiLCJpc1Vua25vd25IVFRQUmVzcG9uc2VFcnJvciIsImFwaUVycm9yQ29kZXMiLCJhcmd1bWVudHMiLCJpc0FQSVJlc3BvbnNlRXJyb3IiLCJib2R5VGV4dCIsImFwaUVycm9yUmVzcG9uc2VCb2R5IiwicGFyc2VkIiwicGFyc2VFcnJvciIsInBhcnNlQVBJRXJyb3JSZXNwb25zZUJvZHkiLCJhc3luYyIsIml0ZXJhdGVQYWdpbmF0ZWRBUEkiLCJsaXN0Rm4iLCJmaXJzdFBhZ2VBcmdzIiwibmV4dEN1cnNvciIsInN0YXJ0X2N1cnNvciIsInJlc3VsdHMiLCJuZXh0X2N1cnNvciIsImlzRnVsbFBhZ2UiLCJpc0Z1bGxEYXRhYmFzZSIsImlzRnVsbENvbW1lbnQiLCJpc0Z1bGxVc2VyIiwiaXNGdWxsUGFnZU9yRGF0YWJhc2UiLCJpc0Z1bGxCbG9jayIsImNvbGxlY3RQYWdpbmF0ZWRBUEkiLCJpdGVtIiwicHVzaCIsIm9iamVjdCIsIkNsaWVudF8xIiwiZW51bWVyYWJsZSIsImhlbHBlcnNfMSIsImNvbnNvbGUiLCJFUlJPUiIsImFzc2VydE5ldmVyIiwiYmFzZSIsImtleXMiLCJtYXAiLCJmcm9tRW50cmllcyIsIm8iLCJnbG9iYWxPYmplY3QiLCJzZWxmIiwid2luZG93IiwiZyIsImdldEdsb2JhbCIsIm1vZHVsZSIsImJpbmQiLCJIZWFkZXJzIiwiUmVxdWVzdCIsIlJlc3BvbnNlIiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiY2FjaGVkTW9kdWxlIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsImdsb2JhbFRoaXMiLCJGdW5jdGlvbiIsImUiLCJyIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJfX2F3YWl0ZXIiLCJ0aGlzQXJnIiwiX2FyZ3VtZW50cyIsIlAiLCJnZW5lcmF0b3IiLCJmdWxmaWxsZWQiLCJzdGVwIiwibmV4dCIsInJlamVjdGVkIiwicmVzdWx0IiwiZG9uZSIsImFwcGx5IiwiZm9ybWF0ZURhdGUiLCJjdXJyZW50RGF0ZSIsIkRhdGUiLCJnZXRGdWxsWWVhciIsImdldE1vbnRoIiwicGFkU3RhcnQiLCJnZXREYXRlIiwiZ2V0U3RvcmFnZURhdGEiLCJjaHJvbWUiLCJzdG9yYWdlIiwibG9jYWwiLCJydW50aW1lIiwibGFzdEVycm9yIiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50QnlJZCIsImFkZEV2ZW50TGlzdGVuZXIiLCJkYXRhYmFzZUlERGF0YSIsInRva2VuRGF0YSIsInNlbGVjdGVkUmVzdWx0Iiwic2VsZWN0ZWRBcnIiLCJzZWxlY3RlZFRleHQiLCJub3Rpb24iLCJuVG9rZW4iLCJjcmVhdGlvblByb21pc2VzIiwicGFyZW50IiwiZGF0YWJhc2VJRCIsImFsbCIsInN0eWxlIiwiYmFja2dyb3VuZENvbG9yIiwiYWxlcnQiLCJzYXZlMm5vdGlvbiIsInJlbW92ZSIsInRhYnMiLCJhY3RpdmUiLCJjdXJyZW50V2luZG93Iiwic2VuZE1lc3NhZ2UiLCJpZCIsImFjdGlvbiIsImxpc3RFbGVtZW50IiwiaW5uZXJIVE1MIiwiZGF0YSIsImxpc3RBcnIiLCJoaWdobGlnaHQiLCJpbmRleCIsIml0ZW1FbGVtZW50IiwiY3JlYXRlRWxlbWVudCIsImNsYXNzTGlzdCIsImFkZCIsInRleHRFbGVtZW50IiwidGV4dENvbnRlbnQiLCJzdWJzdHJpbmciLCJhcHBlbmRDaGlsZCIsImRlbGV0ZUJ1dHRvbiIsIm9uY2xpY2siLCJoaWdobGlnaHRJZCIsInNwbGljZSJdLCJzb3VyY2VSb290IjoiIn0=