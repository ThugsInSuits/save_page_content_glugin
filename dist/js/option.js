(()=>{"use strict";var e={"./node_modules/@notionhq/client/build/src/Client.js":
/*!***********************************************************!*\
  !*** ./node_modules/@notionhq/client/build/src/Client.js ***!
  \***********************************************************/function(e,t,r){var a,o,s,i,n,d,l,u,c,h=this&&this.__classPrivateFieldSet||function(e,t,r,a,o){if("m"===a)throw new TypeError("Private method is not writable");if("a"===a&&!o)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof t?e!==t||!o:!t.has(e))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===a?o.call(e,r):o?o.value=r:t.set(e,r),r},p=this&&this.__classPrivateFieldGet||function(e,t,r,a){if("a"===r&&!a)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?e!==t||!a:!t.has(e))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===r?a:"a"===r?a.call(e):a?a.value:t.get(e)};Object.defineProperty(t,"__esModule",{value:!0});const m=r(/*! ./logging */"./node_modules/@notionhq/client/build/src/logging.js"),b=r(/*! ./errors */"./node_modules/@notionhq/client/build/src/errors.js"),g=r(/*! ./utils */"./node_modules/@notionhq/client/build/src/utils.js"),y=r(/*! ./api-endpoints */"./node_modules/@notionhq/client/build/src/api-endpoints.js"),P=r(/*! node-fetch */"./node_modules/node-fetch/browser.js"),f=r(/*! ../package.json */"./node_modules/@notionhq/client/build/package.json");class v{constructor(e){var t,r,p,b,k,q;a.set(this,void 0),o.set(this,void 0),s.set(this,void 0),i.set(this,void 0),n.set(this,void 0),d.set(this,void 0),l.set(this,void 0),u.set(this,void 0),c.set(this,void 0),this.blocks={retrieve:e=>this.request({path:y.getBlock.path(e),method:y.getBlock.method,query:(0,g.pick)(e,y.getBlock.queryParams),body:(0,g.pick)(e,y.getBlock.bodyParams),auth:null==e?void 0:e.auth}),update:e=>this.request({path:y.updateBlock.path(e),method:y.updateBlock.method,query:(0,g.pick)(e,y.updateBlock.queryParams),body:(0,g.pick)(e,y.updateBlock.bodyParams),auth:null==e?void 0:e.auth}),delete:e=>this.request({path:y.deleteBlock.path(e),method:y.deleteBlock.method,query:(0,g.pick)(e,y.deleteBlock.queryParams),body:(0,g.pick)(e,y.deleteBlock.bodyParams),auth:null==e?void 0:e.auth}),children:{append:e=>this.request({path:y.appendBlockChildren.path(e),method:y.appendBlockChildren.method,query:(0,g.pick)(e,y.appendBlockChildren.queryParams),body:(0,g.pick)(e,y.appendBlockChildren.bodyParams),auth:null==e?void 0:e.auth}),list:e=>this.request({path:y.listBlockChildren.path(e),method:y.listBlockChildren.method,query:(0,g.pick)(e,y.listBlockChildren.queryParams),body:(0,g.pick)(e,y.listBlockChildren.bodyParams),auth:null==e?void 0:e.auth})}},this.databases={list:e=>this.request({path:y.listDatabases.path(),method:y.listDatabases.method,query:(0,g.pick)(e,y.listDatabases.queryParams),body:(0,g.pick)(e,y.listDatabases.bodyParams),auth:null==e?void 0:e.auth}),retrieve:e=>this.request({path:y.getDatabase.path(e),method:y.getDatabase.method,query:(0,g.pick)(e,y.getDatabase.queryParams),body:(0,g.pick)(e,y.getDatabase.bodyParams),auth:null==e?void 0:e.auth}),query:e=>this.request({path:y.queryDatabase.path(e),method:y.queryDatabase.method,query:(0,g.pick)(e,y.queryDatabase.queryParams),body:(0,g.pick)(e,y.queryDatabase.bodyParams),auth:null==e?void 0:e.auth}),create:e=>this.request({path:y.createDatabase.path(),method:y.createDatabase.method,query:(0,g.pick)(e,y.createDatabase.queryParams),body:(0,g.pick)(e,y.createDatabase.bodyParams),auth:null==e?void 0:e.auth}),update:e=>this.request({path:y.updateDatabase.path(e),method:y.updateDatabase.method,query:(0,g.pick)(e,y.updateDatabase.queryParams),body:(0,g.pick)(e,y.updateDatabase.bodyParams),auth:null==e?void 0:e.auth})},this.pages={create:e=>this.request({path:y.createPage.path(),method:y.createPage.method,query:(0,g.pick)(e,y.createPage.queryParams),body:(0,g.pick)(e,y.createPage.bodyParams),auth:null==e?void 0:e.auth}),retrieve:e=>this.request({path:y.getPage.path(e),method:y.getPage.method,query:(0,g.pick)(e,y.getPage.queryParams),body:(0,g.pick)(e,y.getPage.bodyParams),auth:null==e?void 0:e.auth}),update:e=>this.request({path:y.updatePage.path(e),method:y.updatePage.method,query:(0,g.pick)(e,y.updatePage.queryParams),body:(0,g.pick)(e,y.updatePage.bodyParams),auth:null==e?void 0:e.auth}),properties:{retrieve:e=>this.request({path:y.getPageProperty.path(e),method:y.getPageProperty.method,query:(0,g.pick)(e,y.getPageProperty.queryParams),body:(0,g.pick)(e,y.getPageProperty.bodyParams),auth:null==e?void 0:e.auth})}},this.users={retrieve:e=>this.request({path:y.getUser.path(e),method:y.getUser.method,query:(0,g.pick)(e,y.getUser.queryParams),body:(0,g.pick)(e,y.getUser.bodyParams),auth:null==e?void 0:e.auth}),list:e=>this.request({path:y.listUsers.path(),method:y.listUsers.method,query:(0,g.pick)(e,y.listUsers.queryParams),body:(0,g.pick)(e,y.listUsers.bodyParams),auth:null==e?void 0:e.auth}),me:e=>this.request({path:y.getSelf.path(),method:y.getSelf.method,query:(0,g.pick)(e,y.getSelf.queryParams),body:(0,g.pick)(e,y.getSelf.bodyParams),auth:null==e?void 0:e.auth})},this.comments={create:e=>this.request({path:y.createComment.path(),method:y.createComment.method,query:(0,g.pick)(e,y.createComment.queryParams),body:(0,g.pick)(e,y.createComment.bodyParams),auth:null==e?void 0:e.auth}),list:e=>this.request({path:y.listComments.path(),method:y.listComments.method,query:(0,g.pick)(e,y.listComments.queryParams),body:(0,g.pick)(e,y.listComments.bodyParams),auth:null==e?void 0:e.auth})},this.search=e=>this.request({path:y.search.path(),method:y.search.method,query:(0,g.pick)(e,y.search.queryParams),body:(0,g.pick)(e,y.search.bodyParams),auth:null==e?void 0:e.auth}),this.oauth={token:e=>this.request({path:y.oauthToken.path(),method:y.oauthToken.method,query:(0,g.pick)(e,y.oauthToken.queryParams),body:(0,g.pick)(e,y.oauthToken.bodyParams),auth:{client_id:e.client_id,client_secret:e.client_secret}})},h(this,a,null==e?void 0:e.auth,"f"),h(this,o,null!==(t=null==e?void 0:e.logLevel)&&void 0!==t?t:m.LogLevel.WARN,"f"),h(this,s,null!==(r=null==e?void 0:e.logger)&&void 0!==r?r:(0,m.makeConsoleLogger)(f.name),"f"),h(this,i,(null!==(p=null==e?void 0:e.baseUrl)&&void 0!==p?p:"https://api.notion.com")+"/v1/","f"),h(this,n,null!==(b=null==e?void 0:e.timeoutMs)&&void 0!==b?b:6e4,"f"),h(this,d,null!==(k=null==e?void 0:e.notionVersion)&&void 0!==k?k:v.defaultNotionVersion,"f"),h(this,l,null!==(q=null==e?void 0:e.fetch)&&void 0!==q?q:P.default,"f"),h(this,u,null==e?void 0:e.agent,"f"),h(this,c,`notionhq-client/${f.version}`,"f")}async request({path:e,method:t,query:r,body:a,auth:o}){this.log(m.LogLevel.INFO,"request start",{method:t,path:e});const s=a&&0!==Object.entries(a).length?JSON.stringify(a):void 0,h=new URL(`${p(this,i,"f")}${e}`);if(r)for(const[e,t]of Object.entries(r))void 0!==t&&(Array.isArray(t)?t.forEach((t=>h.searchParams.append(e,decodeURIComponent(t)))):h.searchParams.append(e,String(t)));let g;if("object"==typeof o){const e=`${o.client_id}:${o.client_secret}`;g={authorization:`Basic ${Buffer.from(e).toString("base64")}`}}else g=this.authAsHeaders(o);const y={...g,"Notion-Version":p(this,d,"f"),"user-agent":p(this,c,"f")};void 0!==s&&(y["content-type"]="application/json");try{const r=await b.RequestTimeoutError.rejectAfterTimeout(p(this,l,"f").call(this,h.toString(),{method:t.toUpperCase(),headers:y,body:s,agent:p(this,u,"f")}),p(this,n,"f")),a=await r.text();if(!r.ok)throw(0,b.buildRequestError)(r,a);const o=JSON.parse(a);return this.log(m.LogLevel.INFO,"request success",{method:t,path:e}),o}catch(e){if(!(0,b.isNotionClientError)(e))throw e;throw this.log(m.LogLevel.WARN,"request fail",{code:e.code,message:e.message}),(0,b.isHTTPResponseError)(e)&&this.log(m.LogLevel.DEBUG,"failed response body",{body:e.body}),e}}log(e,t,r){(0,m.logLevelSeverity)(e)>=(0,m.logLevelSeverity)(p(this,o,"f"))&&p(this,s,"f").call(this,e,t,r)}authAsHeaders(e){const t={},r=null!=e?e:p(this,a,"f");return void 0!==r&&(t.authorization=`Bearer ${r}`),t}}t.default=v,a=new WeakMap,o=new WeakMap,s=new WeakMap,i=new WeakMap,n=new WeakMap,d=new WeakMap,l=new WeakMap,u=new WeakMap,c=new WeakMap,v.defaultNotionVersion="2022-06-28"},"./node_modules/@notionhq/client/build/src/api-endpoints.js":
/*!******************************************************************!*\
  !*** ./node_modules/@notionhq/client/build/src/api-endpoints.js ***!
  \******************************************************************/(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.oauthToken=t.listComments=t.createComment=t.search=t.createDatabase=t.listDatabases=t.queryDatabase=t.updateDatabase=t.getDatabase=t.appendBlockChildren=t.listBlockChildren=t.deleteBlock=t.updateBlock=t.getBlock=t.getPageProperty=t.updatePage=t.getPage=t.createPage=t.listUsers=t.getUser=t.getSelf=void 0,t.getSelf={method:"get",pathParams:[],queryParams:[],bodyParams:[],path:()=>"users/me"},t.getUser={method:"get",pathParams:["user_id"],queryParams:[],bodyParams:[],path:e=>`users/${e.user_id}`},t.listUsers={method:"get",pathParams:[],queryParams:["start_cursor","page_size"],bodyParams:[],path:()=>"users"},t.createPage={method:"post",pathParams:[],queryParams:[],bodyParams:["parent","properties","icon","cover","content","children"],path:()=>"pages"},t.getPage={method:"get",pathParams:["page_id"],queryParams:["filter_properties"],bodyParams:[],path:e=>`pages/${e.page_id}`},t.updatePage={method:"patch",pathParams:["page_id"],queryParams:[],bodyParams:["properties","icon","cover","archived"],path:e=>`pages/${e.page_id}`},t.getPageProperty={method:"get",pathParams:["page_id","property_id"],queryParams:["start_cursor","page_size"],bodyParams:[],path:e=>`pages/${e.page_id}/properties/${e.property_id}`},t.getBlock={method:"get",pathParams:["block_id"],queryParams:[],bodyParams:[],path:e=>`blocks/${e.block_id}`},t.updateBlock={method:"patch",pathParams:["block_id"],queryParams:[],bodyParams:["embed","type","archived","bookmark","image","video","pdf","file","audio","code","equation","divider","breadcrumb","table_of_contents","link_to_page","table_row","heading_1","heading_2","heading_3","paragraph","bulleted_list_item","numbered_list_item","quote","to_do","toggle","template","callout","synced_block","table"],path:e=>`blocks/${e.block_id}`},t.deleteBlock={method:"delete",pathParams:["block_id"],queryParams:[],bodyParams:[],path:e=>`blocks/${e.block_id}`},t.listBlockChildren={method:"get",pathParams:["block_id"],queryParams:["start_cursor","page_size"],bodyParams:[],path:e=>`blocks/${e.block_id}/children`},t.appendBlockChildren={method:"patch",pathParams:["block_id"],queryParams:[],bodyParams:["children","after"],path:e=>`blocks/${e.block_id}/children`},t.getDatabase={method:"get",pathParams:["database_id"],queryParams:[],bodyParams:[],path:e=>`databases/${e.database_id}`},t.updateDatabase={method:"patch",pathParams:["database_id"],queryParams:[],bodyParams:["title","description","icon","cover","properties","is_inline","archived"],path:e=>`databases/${e.database_id}`},t.queryDatabase={method:"post",pathParams:["database_id"],queryParams:["filter_properties"],bodyParams:["sorts","filter","start_cursor","page_size","archived"],path:e=>`databases/${e.database_id}/query`},t.listDatabases={method:"get",pathParams:[],queryParams:["start_cursor","page_size"],bodyParams:[],path:()=>"databases"},t.createDatabase={method:"post",pathParams:[],queryParams:[],bodyParams:["parent","properties","icon","cover","title","description","is_inline"],path:()=>"databases"},t.search={method:"post",pathParams:[],queryParams:[],bodyParams:["sort","query","start_cursor","page_size","filter"],path:()=>"search"},t.createComment={method:"post",pathParams:[],queryParams:[],bodyParams:["parent","rich_text","discussion_id"],path:()=>"comments"},t.listComments={method:"get",pathParams:[],queryParams:["block_id","start_cursor","page_size"],bodyParams:[],path:()=>"comments"},t.oauthToken={method:"post",pathParams:[],queryParams:[],bodyParams:["grant_type","code","redirect_uri","external_account"],path:()=>"oauth/token"}},"./node_modules/@notionhq/client/build/src/errors.js":
/*!***********************************************************!*\
  !*** ./node_modules/@notionhq/client/build/src/errors.js ***!
  \***********************************************************/(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.buildRequestError=t.APIResponseError=t.UnknownHTTPResponseError=t.isHTTPResponseError=t.RequestTimeoutError=t.isNotionClientError=t.ClientErrorCode=t.APIErrorCode=void 0;const a=r(/*! ./utils */"./node_modules/@notionhq/client/build/src/utils.js");var o,s;!function(e){e.Unauthorized="unauthorized",e.RestrictedResource="restricted_resource",e.ObjectNotFound="object_not_found",e.RateLimited="rate_limited",e.InvalidJSON="invalid_json",e.InvalidRequestURL="invalid_request_url",e.InvalidRequest="invalid_request",e.ValidationError="validation_error",e.ConflictError="conflict_error",e.InternalServerError="internal_server_error",e.ServiceUnavailable="service_unavailable"}(o=t.APIErrorCode||(t.APIErrorCode={})),function(e){e.RequestTimeout="notionhq_client_request_timeout",e.ResponseError="notionhq_client_response_error"}(s=t.ClientErrorCode||(t.ClientErrorCode={}));class i extends Error{}function n(e){return(0,a.isObject)(e)&&e instanceof i}function d(e,t){return n(e)&&e.code in t}t.isNotionClientError=n;class l extends i{constructor(e="Request to Notion API has timed out"){super(e),this.code=s.RequestTimeout,this.name="RequestTimeoutError"}static isRequestTimeoutError(e){return d(e,{[s.RequestTimeout]:!0})}static rejectAfterTimeout(e,t){return new Promise(((r,a)=>{const o=setTimeout((()=>{a(new l)}),t);e.then(r).catch(a).then((()=>clearTimeout(o)))}))}}t.RequestTimeoutError=l;class u extends i{constructor(e){super(e.message),this.name="HTTPResponseError";const{code:t,status:r,headers:a,rawBodyText:o}=e;this.code=t,this.status=r,this.headers=a,this.body=o}}const c={[s.ResponseError]:!0,[o.Unauthorized]:!0,[o.RestrictedResource]:!0,[o.ObjectNotFound]:!0,[o.RateLimited]:!0,[o.InvalidJSON]:!0,[o.InvalidRequestURL]:!0,[o.InvalidRequest]:!0,[o.ValidationError]:!0,[o.ConflictError]:!0,[o.InternalServerError]:!0,[o.ServiceUnavailable]:!0};t.isHTTPResponseError=function(e){return!!d(e,c)};class h extends u{constructor(e){var t;super({...e,code:s.ResponseError,message:null!==(t=e.message)&&void 0!==t?t:`Request to Notion API failed with status: ${e.status}`}),this.name="UnknownHTTPResponseError"}static isUnknownHTTPResponseError(e){return d(e,{[s.ResponseError]:!0})}}t.UnknownHTTPResponseError=h;const p={[o.Unauthorized]:!0,[o.RestrictedResource]:!0,[o.ObjectNotFound]:!0,[o.RateLimited]:!0,[o.InvalidJSON]:!0,[o.InvalidRequestURL]:!0,[o.InvalidRequest]:!0,[o.ValidationError]:!0,[o.ConflictError]:!0,[o.InternalServerError]:!0,[o.ServiceUnavailable]:!0};class m extends u{constructor(){super(...arguments),this.name="APIResponseError"}static isAPIResponseError(e){return d(e,p)}}t.APIResponseError=m,t.buildRequestError=function(e,t){const r=function(e){if("string"!=typeof e)return;let t;try{t=JSON.parse(e)}catch(e){return}if(!(0,a.isObject)(t)||"string"!=typeof t.message||(r=t.code,"string"!=typeof r||!(r in p)))return;var r;return{...t,code:t.code,message:t.message}}(t);return void 0!==r?new m({code:r.code,message:r.message,headers:e.headers,status:e.status,rawBodyText:t}):new h({message:void 0,headers:e.headers,status:e.status,rawBodyText:t})}},"./node_modules/@notionhq/client/build/src/helpers.js":
/*!************************************************************!*\
  !*** ./node_modules/@notionhq/client/build/src/helpers.js ***!
  \************************************************************/(e,t)=>{async function*r(e,t){let r=t.start_cursor;do{const a=await e({...t,start_cursor:r});yield*a.results,r=a.next_cursor}while(r)}function a(e){return"url"in e}function o(e){return"title"in e}Object.defineProperty(t,"__esModule",{value:!0}),t.isFullComment=t.isFullUser=t.isFullPageOrDatabase=t.isFullDatabase=t.isFullPage=t.isFullBlock=t.collectPaginatedAPI=t.iteratePaginatedAPI=void 0,t.iteratePaginatedAPI=r,t.collectPaginatedAPI=async function(e,t){const a=[];for await(const o of r(e,t))a.push(o);return a},t.isFullBlock=function(e){return"type"in e},t.isFullPage=a,t.isFullDatabase=o,t.isFullPageOrDatabase=function(e){return"database"===e.object?o(e):a(e)},t.isFullUser=function(e){return"type"in e},t.isFullComment=function(e){return"created_by"in e}},"./node_modules/@notionhq/client/build/src/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/@notionhq/client/build/src/index.js ***!
  \**********************************************************/(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.isFullPageOrDatabase=t.isFullComment=t.isFullUser=t.isFullPage=t.isFullDatabase=t.isFullBlock=t.iteratePaginatedAPI=t.collectPaginatedAPI=t.isNotionClientError=t.RequestTimeoutError=t.UnknownHTTPResponseError=t.APIResponseError=t.ClientErrorCode=t.APIErrorCode=t.LogLevel=t.Client=void 0;var a=r(/*! ./Client */"./node_modules/@notionhq/client/build/src/Client.js");Object.defineProperty(t,"Client",{enumerable:!0,get:function(){return a.default}});var o=r(/*! ./logging */"./node_modules/@notionhq/client/build/src/logging.js");Object.defineProperty(t,"LogLevel",{enumerable:!0,get:function(){return o.LogLevel}});var s=r(/*! ./errors */"./node_modules/@notionhq/client/build/src/errors.js");Object.defineProperty(t,"APIErrorCode",{enumerable:!0,get:function(){return s.APIErrorCode}}),Object.defineProperty(t,"ClientErrorCode",{enumerable:!0,get:function(){return s.ClientErrorCode}}),Object.defineProperty(t,"APIResponseError",{enumerable:!0,get:function(){return s.APIResponseError}}),Object.defineProperty(t,"UnknownHTTPResponseError",{enumerable:!0,get:function(){return s.UnknownHTTPResponseError}}),Object.defineProperty(t,"RequestTimeoutError",{enumerable:!0,get:function(){return s.RequestTimeoutError}}),Object.defineProperty(t,"isNotionClientError",{enumerable:!0,get:function(){return s.isNotionClientError}});var i=r(/*! ./helpers */"./node_modules/@notionhq/client/build/src/helpers.js");Object.defineProperty(t,"collectPaginatedAPI",{enumerable:!0,get:function(){return i.collectPaginatedAPI}}),Object.defineProperty(t,"iteratePaginatedAPI",{enumerable:!0,get:function(){return i.iteratePaginatedAPI}}),Object.defineProperty(t,"isFullBlock",{enumerable:!0,get:function(){return i.isFullBlock}}),Object.defineProperty(t,"isFullDatabase",{enumerable:!0,get:function(){return i.isFullDatabase}}),Object.defineProperty(t,"isFullPage",{enumerable:!0,get:function(){return i.isFullPage}}),Object.defineProperty(t,"isFullUser",{enumerable:!0,get:function(){return i.isFullUser}}),Object.defineProperty(t,"isFullComment",{enumerable:!0,get:function(){return i.isFullComment}}),Object.defineProperty(t,"isFullPageOrDatabase",{enumerable:!0,get:function(){return i.isFullPageOrDatabase}})},"./node_modules/@notionhq/client/build/src/logging.js":
/*!************************************************************!*\
  !*** ./node_modules/@notionhq/client/build/src/logging.js ***!
  \************************************************************/(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.logLevelSeverity=t.makeConsoleLogger=t.LogLevel=void 0;const a=r(/*! ./utils */"./node_modules/@notionhq/client/build/src/utils.js");var o;!function(e){e.DEBUG="debug",e.INFO="info",e.WARN="warn",e.ERROR="error"}(o=t.LogLevel||(t.LogLevel={})),t.makeConsoleLogger=function(e){return(t,r,a)=>{console[t](`${e} ${t}:`,r,a)}},t.logLevelSeverity=function(e){switch(e){case o.DEBUG:return 20;case o.INFO:return 40;case o.WARN:return 60;case o.ERROR:return 80;default:return(0,a.assertNever)(e)}}},"./node_modules/@notionhq/client/build/src/utils.js":
/*!**********************************************************!*\
  !*** ./node_modules/@notionhq/client/build/src/utils.js ***!
  \**********************************************************/(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.isObject=t.pick=t.assertNever=void 0,t.assertNever=function(e){throw new Error(`Unexpected value should never occur: ${e}`)},t.pick=function(e,t){const r=t.map((t=>[t,null==e?void 0:e[t]]));return Object.fromEntries(r)},t.isObject=function(e){return"object"==typeof e&&null!==e}},"./node_modules/node-fetch/browser.js":
/*!********************************************!*\
  !*** ./node_modules/node-fetch/browser.js ***!
  \********************************************/(e,t,r)=>{var a=function(){if("undefined"!=typeof self)return self;if("undefined"!=typeof window)return window;if(void 0!==r.g)return r.g;throw new Error("unable to locate global object")}();e.exports=t=a.fetch,a.fetch&&(t.default=a.fetch.bind(a)),t.Headers=a.Headers,t.Request=a.Request,t.Response=a.Response},"./node_modules/@notionhq/client/build/package.json":
/*!**********************************************************!*\
  !*** ./node_modules/@notionhq/client/build/package.json ***!
  \**********************************************************/e=>{e.exports=JSON.parse('{"name":"@notionhq/client","version":"2.2.13","description":"A simple and easy to use client for the Notion API","engines":{"node":">=12"},"homepage":"https://developers.notion.com/docs/getting-started","bugs":{"url":"https://github.com/makenotion/notion-sdk-js/issues"},"repository":{"type":"git","url":"https://github.com/makenotion/notion-sdk-js/"},"keywords":["notion","notionapi","rest","notion-api"],"main":"./build/src","types":"./build/src/index.d.ts","scripts":{"prepare":"npm run build","prepublishOnly":"npm run checkLoggedIn && npm run lint && npm run test","build":"tsc","prettier":"prettier --write .","lint":"prettier --check . && eslint . --ext .ts && cspell \'**/*\' ","test":"jest ./test","check-links":"git ls-files | grep md$ | xargs -n 1 markdown-link-check","prebuild":"npm run clean","clean":"rm -rf ./build","checkLoggedIn":"./scripts/verifyLoggedIn.sh"},"author":"","license":"MIT","files":["build/package.json","build/src/**"],"dependencies":{"@types/node-fetch":"^2.5.10","node-fetch":"^2.6.1"},"devDependencies":{"@types/jest":"^28.1.4","@typescript-eslint/eslint-plugin":"^5.39.0","@typescript-eslint/parser":"^5.39.0","cspell":"^5.4.1","eslint":"^7.24.0","jest":"^28.1.2","markdown-link-check":"^3.8.7","prettier":"^2.8.8","ts-jest":"^28.0.5","typescript":"^4.8.4"}}')}},t={};function r(a){var o=t[a];if(void 0!==o)return o.exports;var s=t[a]={exports:{}};return e[a].call(s.exports,s,s.exports,r),s.exports}r.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),r.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var a={};(()=>{
/*!**************************!*\
  !*** ./src/ts/option.ts ***!
  \**************************/
r.r(a);var e=r(/*! @notionhq/client */"./node_modules/@notionhq/client/build/src/index.js");let t=document.getElementById("save"),o=document.getElementById("reset");function s(){chrome.storage.local.get(["nToken","pageID"],(e=>{const r=document.getElementById("nToken"),a=document.getElementById("pageID");r&&a&&(void 0===e.nToken||void 0===e.pageID?(r.value="",a.value="",o.style.backgroundColor="#cecece",o.setAttribute("disabled","disabled"),t.style.backgroundColor="#4285f4",t.removeAttribute("disabled")):(r.value=e.nToken,a.value=e.pageID,t.style.backgroundColor="#cecece",t.setAttribute("disabled","disabled"),o.style.backgroundColor="#4285f4",o.removeAttribute("disabled")))}))}s(),t.addEventListener("click",(()=>{t.style.backgroundColor="#3264B7",t.setAttribute("disabled","disabled"),function(t,r){const a=new e.Client({auth:t});a.databases.create({parent:{type:"page_id",page_id:r},title:[{type:"text",text:{content:"BookList",link:null}}],properties:{context:{title:{}},url:{url:{}},date:{date:{}}}}).then((e=>{chrome.storage.local.set({databaseID:e.id,nToken:t,pageID:r},(()=>{s(),alert("创建Database并保存成功!")}))})).catch((e=>{console.error(e),s(),alert("创建Database失败: "+e.message)}))}(document.getElementById("nToken").value,document.getElementById("pageID").value)})),o.addEventListener("click",(()=>{chrome.storage.local.remove(["nToken","pageID"],(()=>{s()}))}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,